searchNodes=[{"doc":"Elixir bindings to Hugging Face Tokenizers . Hugging Face describes the Tokenizers library as: Fast State-of-the-art tokenizers, optimized for both research and production ðŸ¤— Tokenizers provides an implementation of todayâ€™s most used tokenizers, with a focus on performance and versatility. These tokenizers are also used in ðŸ¤— Transformers. This library has bindings to use pretrained tokenizers. Support for building and training a tokenizer from scratch is forthcoming. A tokenizer is effectively a pipeline of transforms to take some input text and return a Tokenizers.Encoding.t() . The main entrypoint to this library is the Tokenizers.Tokenizer module, which holds the Tokenizers.Tokenizer.t() struct, a container holding the constituent parts of the pipeline. Most functionality is there.","ref":"Tokenizers.html","title":"Tokenizers","type":"module"},{"doc":"The struct and associated functions for an encoding, the output of a tokenizer. Use these functions to retrieve the inputs needed for a natural language processing machine learning model.","ref":"Tokenizers.Encoding.html","title":"Tokenizers.Encoding","type":"module"},{"doc":"Get the attention mask from an encoding.","ref":"Tokenizers.Encoding.html#get_attention_mask/1","title":"Tokenizers.Encoding.get_attention_mask/1","type":"function"},{"doc":"Get the ids from an encoding.","ref":"Tokenizers.Encoding.html#get_ids/1","title":"Tokenizers.Encoding.get_ids/1","type":"function"},{"doc":"Get offsets from an encoding. The offsets are expressed in terms of UTF-8 bytes.","ref":"Tokenizers.Encoding.html#get_offsets/1","title":"Tokenizers.Encoding.get_offsets/1","type":"function"},{"doc":"Get special tokens mask from an encoding.","ref":"Tokenizers.Encoding.html#get_special_tokens_mask/1","title":"Tokenizers.Encoding.get_special_tokens_mask/1","type":"function"},{"doc":"Get the tokens from an encoding.","ref":"Tokenizers.Encoding.html#get_tokens/1","title":"Tokenizers.Encoding.get_tokens/1","type":"function"},{"doc":"Get token type ids from an encoding.","ref":"Tokenizers.Encoding.html#get_type_ids/1","title":"Tokenizers.Encoding.get_type_ids/1","type":"function"},{"doc":"Returns the number of tokens in an Encoding.t() .","ref":"Tokenizers.Encoding.html#n_tokens/1","title":"Tokenizers.Encoding.n_tokens/1","type":"function"},{"doc":"Pad the encoding to the given length. Options direction - The padding direction. Can be :right or :left . Default: :right . pad_id - The id corresponding to the padding token. Default: 0 . pad_token - The padding token to use. Default: &quot;[PAD]&quot; . pad_type_id - The type ID corresponding to the padding token. Default: 0 .","ref":"Tokenizers.Encoding.html#pad/3","title":"Tokenizers.Encoding.pad/3","type":"function"},{"doc":"Truncate the encoding to the given length. Options direction - The truncation direction. Can be :right or :left . Default: :right . stride - The length of previous content to be included in each overflowing piece. Default: 0 .","ref":"Tokenizers.Encoding.html#truncate/3","title":"Tokenizers.Encoding.truncate/3","type":"function"},{"doc":"","ref":"Tokenizers.Encoding.html#t:t/0","title":"Tokenizers.Encoding.t/0","type":"type"},{"doc":"A simple implementation of an HTTP client. This is using the built-in :httpc module, configured to use SSL. The request/1 function is similar to Req.request/1 .","ref":"Tokenizers.HTTPClient.html","title":"Tokenizers.HTTPClient","type":"module"},{"doc":"Make an HTTP(s) requests. Options :method - An HTTP method. By default it uses the :get method. :base_url - The base URL to make requests. By default is &quot; https://huggingface.io&quot;. :url - A path to a resource. By default is &quot;&quot;. :headers - A list of tuples representing HTTP headers. By default it's empty.","ref":"Tokenizers.HTTPClient.html#request/1","title":"Tokenizers.HTTPClient.request/1","type":"function"},{"doc":"The struct and associated functions for the tokenizer model.","ref":"Tokenizers.Model.html","title":"Tokenizers.Model","type":"module"},{"doc":"Retrieves information about the model. Information retrieved differs per model but all include model_type .","ref":"Tokenizers.Model.html#get_model_details/1","title":"Tokenizers.Model.get_model_details/1","type":"function"},{"doc":"","ref":"Tokenizers.Model.html#t:t/0","title":"Tokenizers.Model.t/0","type":"type"},{"doc":"","ref":"Tokenizers.Native.html","title":"Tokenizers.Native","type":"module"},{"doc":"","ref":"Tokenizers.Native.html#decode/3","title":"Tokenizers.Native.decode/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decode_batch/3","title":"Tokenizers.Native.decode_batch/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encode/3","title":"Tokenizers.Native.encode/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encode_batch/3","title":"Tokenizers.Native.encode_batch/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#from_file/1","title":"Tokenizers.Native.from_file/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_attention_mask/1","title":"Tokenizers.Native.get_attention_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_ids/1","title":"Tokenizers.Native.get_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_model/1","title":"Tokenizers.Native.get_model/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_model_details/1","title":"Tokenizers.Native.get_model_details/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_offsets/1","title":"Tokenizers.Native.get_offsets/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_special_tokens_mask/1","title":"Tokenizers.Native.get_special_tokens_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_tokens/1","title":"Tokenizers.Native.get_tokens/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_type_ids/1","title":"Tokenizers.Native.get_type_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_vocab/2","title":"Tokenizers.Native.get_vocab/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_vocab_size/2","title":"Tokenizers.Native.get_vocab_size/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#id_to_token/2","title":"Tokenizers.Native.id_to_token/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#n_tokens/1","title":"Tokenizers.Native.n_tokens/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pad/6","title":"Tokenizers.Native.pad/6","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#save/3","title":"Tokenizers.Native.save/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#token_to_id/2","title":"Tokenizers.Native.token_to_id/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#truncate/4","title":"Tokenizers.Native.truncate/4","type":"function"},{"doc":"The struct and associated functions for a tokenizer. A Tokenizers.Tokenizer.t() is a container that holds the constituent parts of the tokenization pipeline. When you call Tokenizers.Tokenizer.encode/3 , the input text goes through the following pipeline: normalization pre-tokenization model post-processing This returns a Tokenizers.Encoding.t() , which can then give you the token ids for each token in the input text. These token ids are usually used as the input for natural language processing machine learning models.","ref":"Tokenizers.Tokenizer.html","title":"Tokenizers.Tokenizer","type":"module"},{"doc":"Decode the given list of ids or list of lists of ids back to strings. Options :skip_special_tokens - whether the special tokens should be removed from the decoded string. Defaults to true .","ref":"Tokenizers.Tokenizer.html#decode/3","title":"Tokenizers.Tokenizer.decode/3","type":"function"},{"doc":"Encode the given sequence or batch of sequences to a Tokenizers.Encoding.t() . Options :add_special_tokens - whether to add special tokens to the encoding. Defaults to true .","ref":"Tokenizers.Tokenizer.html#encode/3","title":"Tokenizers.Tokenizer.encode/3","type":"function"},{"doc":"Instantiate a new tokenizer from the file at the given path.","ref":"Tokenizers.Tokenizer.html#from_file/1","title":"Tokenizers.Tokenizer.from_file/1","type":"function"},{"doc":"Instantiate a new tokenizer from an existing file on the Hugging Face Hub. This is going to download a tokenizer file, save it to disk and load that file. Options :http_client - A tuple with a module and options. This module should implement the request/1 function, accepting a keyword list with the options for a request. This is inspired by Req.request/1 : https://hexdocs.pm/req/Req.html#request/1 The default HTTP client config is: {Tokenizers.HTTPClient, []} . Since it's inspired by Req , it's possible to use that client without any adjustments. When making request, the options :url and :method are going to be overridden. :headers contains the &quot;user-agent&quot; set by default. :revision - The revision name that should be used for fetching the tokenizers from Hugging Face. :use_cache - Tells if it should read from cache when the file already exists. Defaults to true . :cache_dir - The directory where cache is saved. Files are written to cache even if :use_cache is false. By default it uses :filename.basedir/3 to get a cache dir based in the &quot;tokenizers_elixir&quot; application name.","ref":"Tokenizers.Tokenizer.html#from_pretrained/2","title":"Tokenizers.Tokenizer.from_pretrained/2","type":"function"},{"doc":"Get the Tokenizer 's Model .","ref":"Tokenizers.Tokenizer.html#get_model/1","title":"Tokenizers.Tokenizer.get_model/1","type":"function"},{"doc":"Get the tokenizer's vocabulary as a map of token to id.","ref":"Tokenizers.Tokenizer.html#get_vocab/1","title":"Tokenizers.Tokenizer.get_vocab/1","type":"function"},{"doc":"Get the number of tokens in the vocabulary.","ref":"Tokenizers.Tokenizer.html#get_vocab_size/1","title":"Tokenizers.Tokenizer.get_vocab_size/1","type":"function"},{"doc":"Convert a given id to its token.","ref":"Tokenizers.Tokenizer.html#id_to_token/2","title":"Tokenizers.Tokenizer.id_to_token/2","type":"function"},{"doc":"Save the tokenizer to the provided path.","ref":"Tokenizers.Tokenizer.html#save/2","title":"Tokenizers.Tokenizer.save/2","type":"function"},{"doc":"Convert a given token to its id.","ref":"Tokenizers.Tokenizer.html#token_to_id/2","title":"Tokenizers.Tokenizer.token_to_id/2","type":"function"},{"doc":"An input being a subject to tokenization. Can be either a single sequence, or a pair of sequences.","ref":"Tokenizers.Tokenizer.html#t:encode_input/0","title":"Tokenizers.Tokenizer.encode_input/0","type":"type"},{"doc":"","ref":"Tokenizers.Tokenizer.html#t:t/0","title":"Tokenizers.Tokenizer.t/0","type":"type"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"","ref":"pretrained.html","title":"Pretrained Tokenizers","type":"extras"},{"doc":"This Livebook will demonstrate how to use Tokenizers with pretrained tokenizers available on the Hugging Face Hub . We'll install Kino for user input and SciData for real data to tokenize. Mix . install ( [ { :kino , &quot;~&gt; 0.5.2&quot; } , { :scidata , &quot;~&gt; 0.1.5&quot; } , { :tokenizers , &quot;~&gt; 0.2.0&quot; } , { :nx , &quot;~&gt; 0.3&quot; } ] , force : true ) We'll alias modules in Tokenizers for readability. For now, the two main entry points into Tokenizers are the Tokenizer and Encoding modules. alias Tokenizers.Tokenizer alias Tokenizers.Encoding","ref":"pretrained.html#setup","title":"Pretrained Tokenizers - Setup","type":"extras"},{"doc":"The first thing to do is get a tokenizer from the hub. I've chosen bert-base-cased here as it's commonly used in Hugging Face examples. This call will download the tokenizer from the hub and load it into memory. { :ok , tokenizer } = Tokenizer . from_pretrained ( &quot;bert-base-cased&quot; )","ref":"pretrained.html#get-a-tokenizer","title":"Pretrained Tokenizers - Get a tokenizer","type":"extras"},{"doc":"You can save and load models. That means you can load in tokenizers you may have trained locally! You can choose the path with the Kino input below. input = Kino.Input . text ( &quot;Path&quot; ) path = Kino.Input . read ( input ) Tokenizer . save ( tokenizer , path ) { :ok , tokenizer } = Tokenizer . from_file ( path )","ref":"pretrained.html#save-and-load","title":"Pretrained Tokenizers - Save and load","type":"extras"},{"doc":"Let's see what we can do with the tokenizer. First, let's have a look at the vocab. It's represented as a map of tokens to ids. vocab = Tokenizer . get_vocab ( tokenizer ) We can access an id using the vocab, but we don't need to extract the vocab. Tokenizer.token_to_id/2 does the job for us. vocab [ &quot;Jaguar&quot; ] Tokenizer . token_to_id ( tokenizer , &quot;Jaguar&quot; ) And if we want to go back the other way... Tokenizer . id_to_token ( tokenizer , 21694 ) We can also see the vocab size. Tokenizer . get_vocab_size ( tokenizer )","ref":"pretrained.html#check-the-tokenizer","title":"Pretrained Tokenizers - Check the tokenizer","type":"extras"},{"doc":"When you tokenize some text you get an encoding. This is represented as Tokenizers.Encoding.t() . Because Tokenizers relies on Rust bindings, the encoding itself appears opaque. { :ok , encoding } = Tokenizer . encode ( tokenizer , &quot;Hello there!&quot; ) However, we can get the ids for the encoding as an Elixir list. ids = Encoding . get_ids ( encoding ) And we can decode those back into tokens. Tokenizer . decode ( tokenizer , ids ) Passing a batch of text as a list of strings returns a batch of encodings. { :ok , encodings } = Tokenizer . encode ( tokenizer , [ &quot;Hello there!&quot; , &quot;This is a test.&quot; ] ) And we can see the list of ids and decode them again. list_of_ids = Enum . map ( encodings , &amp; Encoding . get_ids / 1 ) Tokenizer . decode ( tokenizer , list_of_ids )","ref":"pretrained.html#encode-and-decode","title":"Pretrained Tokenizers - Encode and decode","type":"extras"},{"doc":"Typically the reason we're tokenizing text is to use it as an input in a machine learning model. For that, we'll need tensors. In order to get a tensor, we need sequences that are all of the same length. We'll get some data from Scidata and use Tokenizers.Encoding.pad/3 and Tokenizers.Encoding.truncate/3 to yield a tensor. %{ review : reviews } = Scidata.YelpPolarityReviews . download_test ( ) tensor = reviews |&gt; Enum . take ( 10 ) |&gt; Enum . map ( fn review -&gt; { :ok , tokenized } = Tokenizer . encode ( tokenizer , review ) padded = Encoding . pad ( tokenized , 200 ) truncated = Encoding . truncate ( padded , 200 ) Encoding . get_ids ( truncated ) end ) |&gt; Nx . tensor ( ) And we can reverse the operation to see our data. Note the [PAD] tokens. tensor |&gt; Nx . to_batched_list ( 1 ) |&gt; Enum . map ( fn tensor_review -&gt; { :ok , decoded } = tensor_review |&gt; Nx . to_flat_list ( ) |&gt; then ( &amp; Tokenizer . decode ( tokenizer , &amp;1 ) ) decoded end )","ref":"pretrained.html#get-a-tensor","title":"Pretrained Tokenizers - Get a tensor","type":"extras"}]