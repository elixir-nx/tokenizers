searchData={"content_type":"text/markdown","items":[{"doc":"Elixir bindings to [Hugging Face Tokenizers](https://github.com/huggingface/tokenizers).\n\nHugging Face describes the Tokenizers library as:\n\n> Fast State-of-the-art tokenizers, optimized for both research and\n> production\n>\n> ü§ó Tokenizers provides an implementation of today‚Äôs most used\n> tokenizers, with a focus on performance and versatility. These\n> tokenizers are also used in ü§ó Transformers.\n\nA tokenizer is effectively a pipeline of transformations that take\na text input and return an encoded version of that text (`t:Tokenizers.Encoding.t/0`).\n\nThe main entrypoint to this library is the `Tokenizers.Tokenizer`\nmodule, which defines the `t:Tokenizers.Tokenizer.t/0` struct, a\ncontainer holding the constituent parts of the pipeline. Most\nfunctionality is in that module.","ref":"Tokenizers.html","title":"Tokenizers","type":"module"},{"doc":"Decoders and decoding functions.\n\nDecoder transforms a sequence of token ids back to a readable piece\nof text.\n\nSome normalizers and pre-tokenizers use special characters or\nidentifiers that need special logic to be reverted.","ref":"Tokenizers.Decoder.html","title":"Tokenizers.Decoder","type":"module"},{"doc":"Creates a BPE decoder.","ref":"Tokenizers.Decoder.html#bpe/1","title":"Tokenizers.Decoder.bpe/1","type":"function"},{"doc":"* `suffix` - the suffix to add to the end of each word. Defaults\n    to ` `","ref":"Tokenizers.Decoder.html#bpe/1-options","title":"Options - Tokenizers.Decoder.bpe/1","type":"function"},{"doc":"Creates a ByteFallback decoder.","ref":"Tokenizers.Decoder.html#byte_fallback/0","title":"Tokenizers.Decoder.byte_fallback/0","type":"function"},{"doc":"Creates a ByteLevel decoder.","ref":"Tokenizers.Decoder.html#byte_level/0","title":"Tokenizers.Decoder.byte_level/0","type":"function"},{"doc":"Creates a CTC decoder.","ref":"Tokenizers.Decoder.html#ctc/1","title":"Tokenizers.Decoder.ctc/1","type":"function"},{"doc":"* `pad_token` - the token used for padding. Defaults to ` `\n\n  * `word_delimiter_token` - the token used for word delimiter.\n    Defaults to `|`\n\n  * `cleanup` - whether to cleanup tokenization artifacts, defaults\n    to `true`","ref":"Tokenizers.Decoder.html#ctc/1-options","title":"Options - Tokenizers.Decoder.ctc/1","type":"function"},{"doc":"Decodes tokens into string with provided decoder.","ref":"Tokenizers.Decoder.html#decode/2","title":"Tokenizers.Decoder.decode/2","type":"function"},{"doc":"Creates a Fuse decoder.","ref":"Tokenizers.Decoder.html#fuse/0","title":"Tokenizers.Decoder.fuse/0","type":"function"},{"doc":"Creates a Metaspace decoder.","ref":"Tokenizers.Decoder.html#metaspace/1","title":"Tokenizers.Decoder.metaspace/1","type":"function"},{"doc":"* `replacement` - the replacement character. Defaults to `‚ñÅ`\n    (as char)\n\n  * `:prepend_scheme` - whether to add a space to the first word if there\n    isn't already one. This lets us treat \"hello\" exactly like \"say hello\".\n    Either of `:always`, `:never`, `:first`. `:first` means the space is\n    only added on the first token (relevant when special tokens are used\n    or other pre_tokenizer are used). Defaults to `:always`","ref":"Tokenizers.Decoder.html#metaspace/1-options","title":"Options - Tokenizers.Decoder.metaspace/1","type":"function"},{"doc":"Creates a Replace decoder.","ref":"Tokenizers.Decoder.html#replace/2","title":"Tokenizers.Decoder.replace/2","type":"function"},{"doc":"Combines a list of decoders into a single sequential decoder.","ref":"Tokenizers.Decoder.html#sequence/1","title":"Tokenizers.Decoder.sequence/1","type":"function"},{"doc":"Creates a Strip decoder.\n\nIt expects a character and the number of times to strip the\ncharacter on `left` and `right` sides.","ref":"Tokenizers.Decoder.html#strip/3","title":"Tokenizers.Decoder.strip/3","type":"function"},{"doc":"Creates a WordPiece decoder.","ref":"Tokenizers.Decoder.html#word_piece/1","title":"Tokenizers.Decoder.word_piece/1","type":"function"},{"doc":"* `prefix` - The prefix to use for subwords. Defaults to `##`\n\n  * `cleanup` - Whether to cleanup tokenization artifacts. Defaults\n    to `true`","ref":"Tokenizers.Decoder.html#word_piece/1-options","title":"Options - Tokenizers.Decoder.word_piece/1","type":"function"},{"doc":"","ref":"Tokenizers.Decoder.html#t:t/0","title":"Tokenizers.Decoder.t/0","type":"type"},{"doc":"Encoding is the result of passing a text through tokenization pipeline.\n\nThis function defines a struct and a number of functions to retrieve\ninformation about the encoded text.\n\nFor further machine learning processing you most likely want to\naccess the encoded token ids via `get_ids/1`. If you want to convert\nthe ids to a tensor, use `get_u32_ids/1` to get a zero-copy binary.","ref":"Tokenizers.Encoding.html","title":"Tokenizers.Encoding","type":"module"},{"doc":"Returns the token that contains the given char.","ref":"Tokenizers.Encoding.html#char_to_token/3","title":"Tokenizers.Encoding.char_to_token/3","type":"function"},{"doc":"Returns the word that contains the given char.","ref":"Tokenizers.Encoding.html#char_to_word/3","title":"Tokenizers.Encoding.char_to_word/3","type":"function"},{"doc":"Returns the attention mask from `encoding`.","ref":"Tokenizers.Encoding.html#get_attention_mask/1","title":"Tokenizers.Encoding.get_attention_mask/1","type":"function"},{"doc":"Returns the ids from `encoding`.","ref":"Tokenizers.Encoding.html#get_ids/1","title":"Tokenizers.Encoding.get_ids/1","type":"function"},{"doc":"Returns the number of tokens in `encoding`.","ref":"Tokenizers.Encoding.html#get_length/1","title":"Tokenizers.Encoding.get_length/1","type":"function"},{"doc":"Returns the number of sequences combined in `encoding`.","ref":"Tokenizers.Encoding.html#get_n_sequences/1","title":"Tokenizers.Encoding.get_n_sequences/1","type":"function"},{"doc":"Returns offsets from `encoding`.\n\nThe offsets are expressed in terms of UTF-8 bytes.","ref":"Tokenizers.Encoding.html#get_offsets/1","title":"Tokenizers.Encoding.get_offsets/1","type":"function"},{"doc":"Returns the overflow from `encoding`.","ref":"Tokenizers.Encoding.html#get_overflowing/1","title":"Tokenizers.Encoding.get_overflowing/1","type":"function"},{"doc":"Returns sequence ids from `encoding`.","ref":"Tokenizers.Encoding.html#get_sequence_ids/1","title":"Tokenizers.Encoding.get_sequence_ids/1","type":"function"},{"doc":"Returns the special tokens mask from `encoding`.","ref":"Tokenizers.Encoding.html#get_special_tokens_mask/1","title":"Tokenizers.Encoding.get_special_tokens_mask/1","type":"function"},{"doc":"Returns the tokens from `encoding`.","ref":"Tokenizers.Encoding.html#get_tokens/1","title":"Tokenizers.Encoding.get_tokens/1","type":"function"},{"doc":"Returns token type ids from `encoding`.","ref":"Tokenizers.Encoding.html#get_type_ids/1","title":"Tokenizers.Encoding.get_type_ids/1","type":"function"},{"doc":"Same as `get_attention_mask/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_attention_mask/1","title":"Tokenizers.Encoding.get_u32_attention_mask/1","type":"function"},{"doc":"Same as `get_ids/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_ids/1","title":"Tokenizers.Encoding.get_u32_ids/1","type":"function"},{"doc":"Same as `get_special_tokens_mask/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_special_tokens_mask/1","title":"Tokenizers.Encoding.get_u32_special_tokens_mask/1","type":"function"},{"doc":"Same as `get_type_ids/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_type_ids/1","title":"Tokenizers.Encoding.get_u32_type_ids/1","type":"function"},{"doc":"Returns word ids from `encoding`.","ref":"Tokenizers.Encoding.html#get_word_ids/1","title":"Tokenizers.Encoding.get_word_ids/1","type":"function"},{"doc":"Returns the number of tokens in `encoding`.","ref":"Tokenizers.Encoding.html#n_tokens/1","title":"Tokenizers.Encoding.n_tokens/1","type":"function"},{"doc":"Pad the encoding to the given length.\n\nFor available options see `t:padding_opts/0`.","ref":"Tokenizers.Encoding.html#pad/3","title":"Tokenizers.Encoding.pad/3","type":"function"},{"doc":"Sets the given sequence id for all tokens contained in `encoding`.","ref":"Tokenizers.Encoding.html#set_sequence_id/2","title":"Tokenizers.Encoding.set_sequence_id/2","type":"function"},{"doc":"Returns the offsets of the token at the given index.","ref":"Tokenizers.Encoding.html#token_to_chars/2","title":"Tokenizers.Encoding.token_to_chars/2","type":"function"},{"doc":"Returns the index of the sequence containing the given token.","ref":"Tokenizers.Encoding.html#token_to_sequence/2","title":"Tokenizers.Encoding.token_to_sequence/2","type":"function"},{"doc":"Returns the word that contains the token at the given index.","ref":"Tokenizers.Encoding.html#token_to_word/2","title":"Tokenizers.Encoding.token_to_word/2","type":"function"},{"doc":"Performs set of transformations to given encoding, creating a new one.\nTransformations are applied in order they are given.\n\nWhile all these transformations can be done one by one, this function\nis more efficient as it avoids multiple allocations and Garbage Collection\nfor intermediate encodings.\n\nCheck the module `Tokenizers.Encoding.Transformation` for handy functions,\nthat can be used to build the transformations list.\nAlso, you can build this list manually, as long as it follows the format.","ref":"Tokenizers.Encoding.html#transform/2","title":"Tokenizers.Encoding.transform/2","type":"function"},{"doc":"Truncate the encoding to the given length.\n\nFor available options see `t:truncation_opts/0`.","ref":"Tokenizers.Encoding.html#truncate/3","title":"Tokenizers.Encoding.truncate/3","type":"function"},{"doc":"Returns the offsets of the word at the given index in the input\nsequence.","ref":"Tokenizers.Encoding.html#word_to_chars/3","title":"Tokenizers.Encoding.word_to_chars/3","type":"function"},{"doc":"Returns the encoded tokens corresponding to the word at the given\nindex in the input sequence, with the form `{start_token, end_token + 1}`.","ref":"Tokenizers.Encoding.html#word_to_tokens/3","title":"Tokenizers.Encoding.word_to_tokens/3","type":"function"},{"doc":"Padding configuration.\n\n  * `:direction` - the padding direction. Defaults to `:right`\n\n  * `:pad_id` - the id corresponding to the padding token. Defaults\n    to `0`\n\n  * `:pad_type_id` - the type ID corresponding to the padding token.\n    Defaults to `0`\n\n  * `:pad_token` - the padding token to use. Defaults to `\"[PAD]\"`","ref":"Tokenizers.Encoding.html#t:padding_opts/0","title":"Tokenizers.Encoding.padding_opts/0","type":"type"},{"doc":"","ref":"Tokenizers.Encoding.html#t:t/0","title":"Tokenizers.Encoding.t/0","type":"type"},{"doc":"Truncation configuration.\n\n  * `:stride` - the length of previous content to be included in each\n    overflowing piece. Defaults to `0`\n\n  * `:direction` - the truncation direction. Defaults to `:right`","ref":"Tokenizers.Encoding.html#t:truncation_opts/0","title":"Tokenizers.Encoding.truncation_opts/0","type":"type"},{"doc":"Module containing handy functions to build the transformations list.\n\nThis list is aplied to an encoding using `Tokenizers.Encoding.transform/2`.","ref":"Tokenizers.Encoding.Transformation.html","title":"Tokenizers.Encoding.Transformation","type":"module"},{"doc":"Generates the padding transformation.\n\nCheck `Tokenizers.Encoding.pad/3` for more information.","ref":"Tokenizers.Encoding.Transformation.html#pad/2","title":"Tokenizers.Encoding.Transformation.pad/2","type":"function"},{"doc":"Generates the set_sequence_id transformation.\n\nCheck `Tokenizers.Encoding.set_sequence_id/2` for more information.","ref":"Tokenizers.Encoding.Transformation.html#set_sequence_id/1","title":"Tokenizers.Encoding.Transformation.set_sequence_id/1","type":"function"},{"doc":"Generates the truncation transformation.\n\nCheck `Tokenizers.Encoding.truncate/3` for more information.","ref":"Tokenizers.Encoding.Transformation.html#truncate/2","title":"Tokenizers.Encoding.Transformation.truncate/2","type":"function"},{"doc":"","ref":"Tokenizers.Encoding.Transformation.html#t:t/0","title":"Tokenizers.Encoding.Transformation.t/0","type":"type"},{"doc":"Functions to load, apply and train tokenizers.\n\nThe `t:Tokenizers.Tokenizer.t/0` struct represents the tokenization\npipeline. When you call `Tokenizers.Tokenizer.encode/3`, the input\ntext goes through the following steps:\n\n  * normalization\n  * pre-tokenization\n  * model\n  * post-processing\n\nThis pipeline returns a `t:Tokenizers.Encoding.t/0`, which can then\ngive you the token ids representing the input text. These token ids\nare usually used as the input for natural language processing (NLP)\nmachine learning models.","ref":"Tokenizers.Tokenizer.html","title":"Tokenizers.Tokenizer","type":"module"},{"doc":"Adds special tokens to `tokenizer`'s vocabulary.\n\nThese tokens **are special**. To add regular tokens use `add_tokens/2`.","ref":"Tokenizers.Tokenizer.html#add_special_tokens/2","title":"Tokenizers.Tokenizer.add_special_tokens/2","type":"function"},{"doc":"Adds tokens to `tokenizer`'s vocabulary.\n\nThese tokens **are not special**. To add special tokens use\n`add_special_tokens/2`.","ref":"Tokenizers.Tokenizer.html#add_tokens/2","title":"Tokenizers.Tokenizer.add_tokens/2","type":"function"},{"doc":"Decodes the given list of ids back to a string.","ref":"Tokenizers.Tokenizer.html#decode/3","title":"Tokenizers.Tokenizer.decode/3","type":"function"},{"doc":"* `:skip_special_tokens` - whether to exclude special tokens from\n    the decoded string. Defaults to `true`","ref":"Tokenizers.Tokenizer.html#decode/3-options","title":"Options - Tokenizers.Tokenizer.decode/3","type":"function"},{"doc":"Batched version of `decode/3`.","ref":"Tokenizers.Tokenizer.html#decode_batch/3","title":"Tokenizers.Tokenizer.decode_batch/3","type":"function"},{"doc":"Disable padding on `tokenizer`.","ref":"Tokenizers.Tokenizer.html#disable_padding/1","title":"Tokenizers.Tokenizer.disable_padding/1","type":"function"},{"doc":"Disable truncation on `tokenizer`.","ref":"Tokenizers.Tokenizer.html#disable_truncation/1","title":"Tokenizers.Tokenizer.disable_truncation/1","type":"function"},{"doc":"Encode the given sequence to a `Tokenizers.Encoding.t()`.","ref":"Tokenizers.Tokenizer.html#encode/3","title":"Tokenizers.Tokenizer.encode/3","type":"function"},{"doc":"* `:add_special_tokens` - whether to add special tokens to the\n    sequence. Defaults to `true`\n\n  * `:encoding_transformations` - a list of `t:Tokenizers.Encoding.Transformation.t/0`\n    to apply to the encoding. Check `Tokenizers.Encoding.transform/2`\n    for more information. Defaults to `[]`","ref":"Tokenizers.Tokenizer.html#encode/3-options","title":"Options - Tokenizers.Tokenizer.encode/3","type":"function"},{"doc":"Batched version of `encode/3`.","ref":"Tokenizers.Tokenizer.html#encode_batch/3","title":"Tokenizers.Tokenizer.encode_batch/3","type":"function"},{"doc":"Instantiate a new tokenizer from the buffer.","ref":"Tokenizers.Tokenizer.html#from_buffer/2","title":"Tokenizers.Tokenizer.from_buffer/2","type":"function"},{"doc":"Instantiate a new tokenizer from the file at the given path.","ref":"Tokenizers.Tokenizer.html#from_file/2","title":"Tokenizers.Tokenizer.from_file/2","type":"function"},{"doc":"Loads a new tokenizer from a repository on Hugging Face Hub.\n\nThis is going to download a tokenizer file, save it to disk and load\nthat file.","ref":"Tokenizers.Tokenizer.html#from_pretrained/2","title":"Tokenizers.Tokenizer.from_pretrained/2","type":"function"},{"doc":"* `:http_client` - a tuple with a module and options. This module\n    should implement the `request/1` function, accepting a keyword\n    list with the options for a request. This is inspired by\n    `Req.request/1`: https://hexdocs.pm/req/Req.html#request/1\n\n    The default HTTP client config is: `{Tokenizers.HTTPClient, []}`.\n    Since it's inspired by `Req`, it's possible to use that client\n    without any adjustments.\n\n    When making request, the options `:url` and `:method` are going\n    to be overridden. `:headers` contains the \"user-agent\" set by\n    default.\n\n  * `:revision` - the revision name that should be used for fetching\n    the tokenizers from the Hugging Face repository\n\n  * `:use_cache` - tells if it should read from cache when the file\n    already exists. Defaults to `true`\n\n  * `:cache_dir` - the directory where cache is saved. Files are\n    written to cache even if `:use_cache` is `false`. By default\n    it uses `:filename.basedir/3` to get a cache dir based in the\n    \"tokenizers_elixir\" application name","ref":"Tokenizers.Tokenizer.html#from_pretrained/2-options","title":"Options - Tokenizers.Tokenizer.from_pretrained/2","type":"function"},{"doc":"Returns the decoder currently used by `tokenizer`.","ref":"Tokenizers.Tokenizer.html#get_decoder/1","title":"Tokenizers.Tokenizer.get_decoder/1","type":"function"},{"doc":"Returns the model currently used by `tokenizer`.","ref":"Tokenizers.Tokenizer.html#get_model/1","title":"Tokenizers.Tokenizer.get_model/1","type":"function"},{"doc":"Returns the normalizer currently used by `tokenizer`.","ref":"Tokenizers.Tokenizer.html#get_normalizer/1","title":"Tokenizers.Tokenizer.get_normalizer/1","type":"function"},{"doc":"Returns the post-processor currently used by `tokenizer`.","ref":"Tokenizers.Tokenizer.html#get_post_processor/1","title":"Tokenizers.Tokenizer.get_post_processor/1","type":"function"},{"doc":"Returns the pre-tokenizer currently used by `tokenizer`.","ref":"Tokenizers.Tokenizer.html#get_pre_tokenizer/1","title":"Tokenizers.Tokenizer.get_pre_tokenizer/1","type":"function"},{"doc":"Get the tokenizer's vocabulary as a map of token to id.","ref":"Tokenizers.Tokenizer.html#get_vocab/2","title":"Tokenizers.Tokenizer.get_vocab/2","type":"function"},{"doc":"* `:with_added_tokens` - whether to include the tokens explicitly\n    added to the tokenizer. Defaults to `true`","ref":"Tokenizers.Tokenizer.html#get_vocab/2-options","title":"Options - Tokenizers.Tokenizer.get_vocab/2","type":"function"},{"doc":"Get the number of tokens in the vocabulary.","ref":"Tokenizers.Tokenizer.html#get_vocab_size/2","title":"Tokenizers.Tokenizer.get_vocab_size/2","type":"function"},{"doc":"* `:with_added_tokens` - whether to include the tokens explicitly\n    added to the tokenizer. Defaults to `true`","ref":"Tokenizers.Tokenizer.html#get_vocab_size/2-options","title":"Options - Tokenizers.Tokenizer.get_vocab_size/2","type":"function"},{"doc":"Convert a given id to its token.","ref":"Tokenizers.Tokenizer.html#id_to_token/2","title":"Tokenizers.Tokenizer.id_to_token/2","type":"function"},{"doc":"Instantiate a new tokenizer from an existing model.","ref":"Tokenizers.Tokenizer.html#init/1","title":"Tokenizers.Tokenizer.init/1","type":"function"},{"doc":"Save the tokenizer to the provided path.","ref":"Tokenizers.Tokenizer.html#save/3","title":"Tokenizers.Tokenizer.save/3","type":"function"},{"doc":"* `:pretty` - whether to pretty print the JSON file. Defaults to `true`","ref":"Tokenizers.Tokenizer.html#save/3-options","title":"Options - Tokenizers.Tokenizer.save/3","type":"function"},{"doc":"Sets `tokenizer`'s decoder.","ref":"Tokenizers.Tokenizer.html#set_decoder/2","title":"Tokenizers.Tokenizer.set_decoder/2","type":"function"},{"doc":"Sets `tokenizer`'s model.","ref":"Tokenizers.Tokenizer.html#set_model/2","title":"Tokenizers.Tokenizer.set_model/2","type":"function"},{"doc":"Sets `tokenizer`'s normalizer.","ref":"Tokenizers.Tokenizer.html#set_normalizer/2","title":"Tokenizers.Tokenizer.set_normalizer/2","type":"function"},{"doc":"Configures `tokenizer` with padding.\n\nTo disable padding use `disable_padding/1`.","ref":"Tokenizers.Tokenizer.html#set_padding/2","title":"Tokenizers.Tokenizer.set_padding/2","type":"function"},{"doc":"* `:strategy` (default: `:batch_longest`) - the strategy to use\n    when padding\n\n  * `:direction` (default: `:right`) - the direction to use when\n    padding\n\n  * `:pad_to_multiple_of` (default: `0`) - the multiple to pad to\n\n  * `:pad_id` (default: `0`) - the id of the token to use for padding\n\n  * `:pad_type_id` (default: `0`) - the id of the token type to use\n    for padding\n\n  * `:pad_token` (default: `\"[PAD]\"`) - the token to use for padding","ref":"Tokenizers.Tokenizer.html#set_padding/2-options","title":"Options - Tokenizers.Tokenizer.set_padding/2","type":"function"},{"doc":"Sets `tokenizer`'s post-processor.","ref":"Tokenizers.Tokenizer.html#set_post_processor/2","title":"Tokenizers.Tokenizer.set_post_processor/2","type":"function"},{"doc":"Sets `tokenizer`'s pre-tokenizer.","ref":"Tokenizers.Tokenizer.html#set_pre_tokenizer/2","title":"Tokenizers.Tokenizer.set_pre_tokenizer/2","type":"function"},{"doc":"Configures `tokenizer` with truncation.\n\nTo disable truncation use `disable_truncation/1`.","ref":"Tokenizers.Tokenizer.html#set_truncation/2","title":"Tokenizers.Tokenizer.set_truncation/2","type":"function"},{"doc":"* `:max_length` (default: `512`) - the maximum length to truncate\n    the model's input to\n\n  * `:stride` (default: `0`) - the stride to use when overflowing\n    the model's input\n\n  * `:strategy` (default: `:longest_first`) - the strategy to use\n    when overflowing the model's input\n\n  * `:direction` (default: `:right`) - the direction to use when\n    overflowing the model's input","ref":"Tokenizers.Tokenizer.html#set_truncation/2-options","title":"Options - Tokenizers.Tokenizer.set_truncation/2","type":"function"},{"doc":"Convert a given token to its id.","ref":"Tokenizers.Tokenizer.html#token_to_id/2","title":"Tokenizers.Tokenizer.token_to_id/2","type":"function"},{"doc":"Train the tokenizer on the given files.","ref":"Tokenizers.Tokenizer.html#train_from_files/3","title":"Tokenizers.Tokenizer.train_from_files/3","type":"function"},{"doc":"* `:trainer` - the trainer to use. Defaults to the default trainer\n    corresponding to `tokenizers`'s model","ref":"Tokenizers.Tokenizer.html#train_from_files/3-options","title":"Options - Tokenizers.Tokenizer.train_from_files/3","type":"function"},{"doc":"An input being a subject to tokenization.\n\nCan be either a single sequence, or a pair of sequences.","ref":"Tokenizers.Tokenizer.html#t:encode_input/0","title":"Tokenizers.Tokenizer.encode_input/0","type":"type"},{"doc":"","ref":"Tokenizers.Tokenizer.html#t:t/0","title":"Tokenizers.Tokenizer.t/0","type":"type"},{"doc":"Normalizers and normalization functions.\n\nA normalizer is in charge of pre-processing the input string in\norder to normalize it as relevant for the given use case.\n\nSome common examples of normalization are the Unicode normalization\nalgorithms (NFD, NFKD, NFC & NFKC) or lowercasing. The specificity\nof tokenizers is that we keep track of the alignment while\nnormalizing. This is essential to allow mapping from the generated\ntokens back to the input text.","ref":"Tokenizers.Normalizer.html","title":"Tokenizers.Normalizer","type":"module"},{"doc":"Takes care of normalizing raw text before giving it to a Bert model.\n\nThis includes cleaning the text, handling accents, chinese chars and\nlowercasing.","ref":"Tokenizers.Normalizer.html#bert_normalizer/1","title":"Tokenizers.Normalizer.bert_normalizer/1","type":"function"},{"doc":"* `:clean_text` - whether to clean the text, by removing any\n    control characters and replacing all whitespaces by the classic\n    one. Defaults to `true`\n\n  * `:handle_chinese_chars` - whether to handle chinese chars by\n    putting spaces around them. Default `true`\n\n  * `:strip_accents` - whether to strip all accents. If this option\n    is not specified, then it will be determined by the value for\n    lowercase (as in the original Bert)\n\n  * `:lowercase` - whether to lowercase. Default `true`","ref":"Tokenizers.Normalizer.html#bert_normalizer/1-options","title":"Options - Tokenizers.Normalizer.bert_normalizer/1","type":"function"},{"doc":"Replaces all uppercase to lowercase","ref":"Tokenizers.Normalizer.html#lowercase/0","title":"Tokenizers.Normalizer.lowercase/0","type":"function"},{"doc":"Creates a NFC Unicode normalizer.","ref":"Tokenizers.Normalizer.html#nfc/0","title":"Tokenizers.Normalizer.nfc/0","type":"function"},{"doc":"Creates a NFD Unicode normalizer.","ref":"Tokenizers.Normalizer.html#nfd/0","title":"Tokenizers.Normalizer.nfd/0","type":"function"},{"doc":"Creates a NFKC Unicode normalizer.","ref":"Tokenizers.Normalizer.html#nfkc/0","title":"Tokenizers.Normalizer.nfkc/0","type":"function"},{"doc":"Creates a NFKD Unicode normalizer.","ref":"Tokenizers.Normalizer.html#nfkd/0","title":"Tokenizers.Normalizer.nfkd/0","type":"function"},{"doc":"Creates a Nmt normalizer.","ref":"Tokenizers.Normalizer.html#nmt/0","title":"Tokenizers.Normalizer.nmt/0","type":"function"},{"doc":"Normalizes the given text input.","ref":"Tokenizers.Normalizer.html#normalize/2","title":"Tokenizers.Normalizer.normalize/2","type":"function"},{"doc":"Precompiled normalizer.\n\nDon‚Äôt use manually it is used for compatibility with SentencePiece.","ref":"Tokenizers.Normalizer.html#precompiled/1","title":"Tokenizers.Normalizer.precompiled/1","type":"function"},{"doc":"Creates a Prepend normalizer.","ref":"Tokenizers.Normalizer.html#prepend/1","title":"Tokenizers.Normalizer.prepend/1","type":"function"},{"doc":"Replaces a custom `search` string with the given `content`.","ref":"Tokenizers.Normalizer.html#replace/2","title":"Tokenizers.Normalizer.replace/2","type":"function"},{"doc":"Replaces occurrences of a custom regexp `pattern` with the given `content`.\n\nThe `pattern` should be a string representing a regular expression\naccording to the [Oniguruma Regex Engine](https://github.com/kkos/oniguruma).","ref":"Tokenizers.Normalizer.html#replace_regex/2","title":"Tokenizers.Normalizer.replace_regex/2","type":"function"},{"doc":"Composes multiple normalizers that will run in the provided order.","ref":"Tokenizers.Normalizer.html#sequence/1","title":"Tokenizers.Normalizer.sequence/1","type":"function"},{"doc":"Creates a Strip normalizer.\n\nRemoves all whitespace characters on the specified sides (left,\nright or both) of the input","ref":"Tokenizers.Normalizer.html#strip/1","title":"Tokenizers.Normalizer.strip/1","type":"function"},{"doc":"* `:left` - whether to strip left side. Defaults to `true`\n\n  * `:right` - whether to strip right side. Defaults to `true`","ref":"Tokenizers.Normalizer.html#strip/1-options","title":"Options - Tokenizers.Normalizer.strip/1","type":"function"},{"doc":"Creates a Strip Accent normalizer.\n\nRemoves all accent symbols in unicode (to be used with NFD for\nconsistency).","ref":"Tokenizers.Normalizer.html#strip_accents/0","title":"Tokenizers.Normalizer.strip_accents/0","type":"function"},{"doc":"","ref":"Tokenizers.Normalizer.html#t:t/0","title":"Tokenizers.Normalizer.t/0","type":"type"},{"doc":"Post-processors.\n\nAfter the whole pipeline, we sometimes want to insert some special\ntokens before we feed the encoded text into a model like\n‚Äù[CLS] My horse is amazing [SEP]‚Äù, we can do that with a post-processor.","ref":"Tokenizers.PostProcessor.html","title":"Tokenizers.PostProcessor","type":"module"},{"doc":"Creates a Bert post-processor with the given tokens.","ref":"Tokenizers.PostProcessor.html#bert/2","title":"Tokenizers.PostProcessor.bert/2","type":"function"},{"doc":"Creates a ByteLevel post-processor.","ref":"Tokenizers.PostProcessor.html#byte_level/1","title":"Tokenizers.PostProcessor.byte_level/1","type":"function"},{"doc":"* `:trim_offsets` - whether to trim the whitespaces in the produced\n    offsets. Defaults to `true`","ref":"Tokenizers.PostProcessor.html#byte_level/1-options","title":"Options - Tokenizers.PostProcessor.byte_level/1","type":"function"},{"doc":"Creates a Roberta post-processor.","ref":"Tokenizers.PostProcessor.html#roberta/3","title":"Tokenizers.PostProcessor.roberta/3","type":"function"},{"doc":"* `:trim_offest` - whether to trim the whitespaces in the produced\n    offsets. Defaults to `true`\n\n  * `:add_prefix_space` - whether add_prefix_space was ON during the\n    pre-tokenization. Defaults to `true`","ref":"Tokenizers.PostProcessor.html#roberta/3-options","title":"Options - Tokenizers.PostProcessor.roberta/3","type":"function"},{"doc":"Instantiate a new Sequence post-processor","ref":"Tokenizers.PostProcessor.html#sequence/1","title":"Tokenizers.PostProcessor.sequence/1","type":"function"},{"doc":"Creates a Template post-processor.\n\nLet‚Äôs you easily template the post processing, adding special tokens\nand specifying the type id for each sequence/special token. The\ntemplate is given two strings representing the single sequence and\nthe pair of sequences, as well as a set of special tokens to use.\n\nFor example, when specifying a template with these values:\n\n* single: `\"[CLS] $A [SEP]\"`\n* pair: `\"[CLS] $A [SEP] $B [SEP]\"`\n* special tokens:\n  * `\"[CLS]\"`\n  * `\"[SEP]\"`\n\n> Input: `(\"I like this\", \"but not this\")`\n> Output: `\"[CLS] I like this [SEP] but not this [SEP]\"`","ref":"Tokenizers.PostProcessor.html#template/1","title":"Tokenizers.PostProcessor.template/1","type":"function"},{"doc":"* `:single` - a string describing the template for a single\n    sequence\n\n  * `:pair` - a string describing the template for a pair of\n    sequences\n\n  * `:special_tokens` - a list of special tokens to use in the\n    template. Must be a list of `{token, token_id}` tuples","ref":"Tokenizers.PostProcessor.html#template/1-options","title":"Options - Tokenizers.PostProcessor.template/1","type":"function"},{"doc":"","ref":"Tokenizers.PostProcessor.html#t:t/0","title":"Tokenizers.PostProcessor.t/0","type":"type"},{"doc":"Pre-tokenizers.\n\nA pre-tokenizer takes care of splitting the input according to a set\nof rules. This pre-processing lets you ensure that the underlying\nmodel does not build tokens across multiple ‚Äúsplits‚Äù. For example\nif you don‚Äôt want to have whitespaces inside a token, then you can\nhave a pre-tokenizer that splits on these whitespaces.\n\nYou can easily combine multiple pre-tokenizers together using\n`sequence/1`.\n\nA pre-tokenizer is also allowed to modify the string, just like a\nnormalizer does. This is necessary to allow some complicated\nalgorithms that require to split before normalizing (e.g. ByteLevel).","ref":"Tokenizers.PreTokenizer.html","title":"Tokenizers.PreTokenizer","type":"module"},{"doc":"Creates a BertPreTokenizer pre-tokenizer.\n\nSplits for use in Bert models.","ref":"Tokenizers.PreTokenizer.html#bert_pre_tokenizer/0","title":"Tokenizers.PreTokenizer.bert_pre_tokenizer/0","type":"function"},{"doc":"Creates a ByteLevel pre-tokenizer.\n\nSplits on whitespaces while remapping all the bytes to a set of\nvisible characters. This technique has been introduced by OpenAI\nwith GPT-2 and has some more or less nice properties:\n\n  * Since it maps on bytes, a tokenizer using this only requires\n    256 characters as initial alphabet (the number of values a byte\n    can have), as opposed to the 130,000+ Unicode characters.\n\n  * A consequence of the previous point is that it is absolutely\n    unnecessary to have an unknown token using this since we can\n    represent anything with 256 tokens (Youhou!! üéâüéâ)\n\n  * For non ascii characters, it gets completely unreadable, but it\n    works nonetheless!","ref":"Tokenizers.PreTokenizer.html#byte_level/1","title":"Tokenizers.PreTokenizer.byte_level/1","type":"function"},{"doc":"* `:add_prefix_space` - whether to add a space to the first word\n    if there isn‚Äôt already one. This lets us treat hello exactly\n    like say hello. Defaults to `true`\n\n  * `:use_regex` - set this to `false` to prevent this pre-tokenizer\n    from using the GPT2 specific regexp for splitting on whitespace.\n    Defaults to `true`","ref":"Tokenizers.PreTokenizer.html#byte_level/1-options","title":"Options - Tokenizers.PreTokenizer.byte_level/1","type":"function"},{"doc":"Gets ByteLevel pre-tokenizer's alphabet.","ref":"Tokenizers.PreTokenizer.html#byte_level_alphabet/0","title":"Tokenizers.PreTokenizer.byte_level_alphabet/0","type":"function"},{"doc":"Creates a CharDelimiterSplit pre-tokenizer.\n\nThis pre-tokenizer simply splits on the provided delimiter. Works\nalmost like simple split function, except that it accounts for\nmultiple consecutive spaces.","ref":"Tokenizers.PreTokenizer.html#char_delimiter_split/1","title":"Tokenizers.PreTokenizer.char_delimiter_split/1","type":"function"},{"doc":"Creates a Digits pre-tokenizer.\n\nSplits the numbers from any other characters.","ref":"Tokenizers.PreTokenizer.html#digits/1","title":"Tokenizers.PreTokenizer.digits/1","type":"function"},{"doc":"* `:individual_digits` - whether to split individual digits or not.\n    Defaults to `false`","ref":"Tokenizers.PreTokenizer.html#digits/1-options","title":"Options - Tokenizers.PreTokenizer.digits/1","type":"function"},{"doc":"Creates Metaspace pre-tokenizer.\n\nSplits on whitespaces and replaces them with a special char ‚Äú‚ñÅ‚Äù\n(U+2581).","ref":"Tokenizers.PreTokenizer.html#metaspace/1","title":"Tokenizers.PreTokenizer.metaspace/1","type":"function"},{"doc":"* `:replacement` - the replacement character to use. Defaults to `\"‚ñÅ\"`\n\n  * `:prepend_scheme` - whether to add a space to the first word if there\n    isn't already one. This lets us treat \"hello\" exactly like \"say hello\".\n    Either of `:always`, `:never`, `:first`. `:first` means the space is\n    only added on the first token (relevant when special tokens are used\n    or other pre_tokenizer are used). Defaults to `:always`","ref":"Tokenizers.PreTokenizer.html#metaspace/1-options","title":"Options - Tokenizers.PreTokenizer.metaspace/1","type":"function"},{"doc":"Converts a string into a sequence of pre-tokens.","ref":"Tokenizers.PreTokenizer.html#pre_tokenize/2","title":"Tokenizers.PreTokenizer.pre_tokenize/2","type":"function"},{"doc":"Creates a Punctuation pre-tokenizer.\n\nWill isolate all punctuation characters.","ref":"Tokenizers.PreTokenizer.html#punctuation/1","title":"Tokenizers.PreTokenizer.punctuation/1","type":"function"},{"doc":"Creates a Sequence pre-tokenizer.\n\nLets you compose multiple pre-tokenizers that will be run in the\ngiven order.","ref":"Tokenizers.PreTokenizer.html#sequence/1","title":"Tokenizers.PreTokenizer.sequence/1","type":"function"},{"doc":"Creates a Split pre-tokenizer using a string as split pattern.\n\nVersatile pre-tokenizer that splits on provided pattern and according\nto provided behavior.","ref":"Tokenizers.PreTokenizer.html#split/3","title":"Tokenizers.PreTokenizer.split/3","type":"function"},{"doc":"* `:invert` - whether to invert the split or not. Defaults to `false`","ref":"Tokenizers.PreTokenizer.html#split/3-options","title":"Options - Tokenizers.PreTokenizer.split/3","type":"function"},{"doc":"Creates a Split pre-tokenizer using a regular expression as split pattern.\n\nVersatile pre-tokenizer that splits on provided regex pattern and according\nto provided behavior.\n\nThe `pattern` should be a string representing a regular expression\naccording to the [Oniguruma Regex Engine](https://github.com/kkos/oniguruma).","ref":"Tokenizers.PreTokenizer.html#split_regex/3","title":"Tokenizers.PreTokenizer.split_regex/3","type":"function"},{"doc":"* `:invert` - whether to invert the split or not. Defaults to `false`","ref":"Tokenizers.PreTokenizer.html#split_regex/3-options","title":"Options - Tokenizers.PreTokenizer.split_regex/3","type":"function"},{"doc":"iex> Tokenizers.PreTokenizer.split_regex(~S(\\?\\d{2}\\?), :removed)\n    #Tokenizers.PreTokenizer","ref":"Tokenizers.PreTokenizer.html#split_regex/3-example","title":"Example - Tokenizers.PreTokenizer.split_regex/3","type":"function"},{"doc":"Creates a Whitespace pre-tokenizer.\n\nSplits on word boundaries. Uses the following regular expression:\n`w+|[^w ]+`.","ref":"Tokenizers.PreTokenizer.html#whitespace/0","title":"Tokenizers.PreTokenizer.whitespace/0","type":"function"},{"doc":"Creates a WhitespaceSplit pre-tokenizer.\n\nSplits on any whitespace character.","ref":"Tokenizers.PreTokenizer.html#whitespace_split/0","title":"Tokenizers.PreTokenizer.whitespace_split/0","type":"function"},{"doc":"Specifies how delimiter should behave for several pretokenizers.","ref":"Tokenizers.PreTokenizer.html#t:split_delimiter_behaviour/0","title":"Tokenizers.PreTokenizer.split_delimiter_behaviour/0","type":"type"},{"doc":"","ref":"Tokenizers.PreTokenizer.html#t:t/0","title":"Tokenizers.PreTokenizer.t/0","type":"type"},{"doc":"This struct represents a token added to tokenizer vocabulary.","ref":"Tokenizers.AddedToken.html","title":"Tokenizers.AddedToken","type":"module"},{"doc":"Retrieves information about added token.","ref":"Tokenizers.AddedToken.html#info/1","title":"Tokenizers.AddedToken.info/1","type":"function"},{"doc":"Builds a new added token.","ref":"Tokenizers.AddedToken.html#new/2","title":"Tokenizers.AddedToken.new/2","type":"function"},{"doc":"* `:special` - defines whether this token is a special token.\n    Defaults to `false`\n\n  * `:single_word` - defines whether this token should only match\n    single words. If `true`, this token will never match inside of a\n    word. For example the token `ing` would match on `tokenizing` if\n    this option is `false`. The notion of ‚Äùinside of a word‚Äù is\n    defined by the word boundaries pattern in regular expressions\n    (i.e. the token should start and end with word boundaries).\n    Defaults to `false`\n\n  * `:lstrip` - defines whether this token should strip all potential\n    whitespace on its left side. If `true`, this token will greedily\n    match any whitespace on its left. For example if we try to match\n    the token `[MASK]` with `lstrip=true`, in the text `\"I saw a [MASK]\"`,\n    we would match on `\" [MASK]\"`. (Note the space on the left).\n    Defaults to `false`\n\n  * `:rstrip` - defines whether this token should strip all potential\n    whitespaces on its right side. If `true`, this token will greedily\n    match any whitespace on its right. It works just like `:lstrip`,\n    but on the right. Defaults to `false`\n\n  * `:normalized` - defines whether this token should match against\n    the normalized version of the input text. For example, with the\n    added token `\"yesterday\"`, and a normalizer in charge of\n    lowercasing the text, the token could be extract from the input\n    `\"I saw a lion Yesterday\"`. If `true`, the token will be extracted\n    from the normalized input `\"i saw a lion yesterday\"`. If `false`,\n    the token will be extracted from the original input\n    `\"I saw a lion Yesterday\"`. Defaults to `false` for special tokens\n    and `true` otherwise","ref":"Tokenizers.AddedToken.html#new/2-options","title":"Options - Tokenizers.AddedToken.new/2","type":"function"},{"doc":"","ref":"Tokenizers.AddedToken.html#t:t/0","title":"Tokenizers.AddedToken.t/0","type":"type"},{"doc":"The struct and associated functions for the tokenizer model.","ref":"Tokenizers.Model.html","title":"Tokenizers.Model","type":"module"},{"doc":"Retrieves information about the model.\n\nInformation retrieved differs per model but all include `model_type`.","ref":"Tokenizers.Model.html#info/1","title":"Tokenizers.Model.info/1","type":"function"},{"doc":"Saves the given model in the given directory.\n\nThis function generates a couple files with predefined names, you\ncan specify `:prefix` to scope them. Existing files with the same\nnames in this directory will be overridden.","ref":"Tokenizers.Model.html#save/3","title":"Tokenizers.Model.save/3","type":"function"},{"doc":"* `:prefix` - the prefix to use for all the files that will get\n    created. Defaults to `\"\"`","ref":"Tokenizers.Model.html#save/3-options","title":"Options - Tokenizers.Model.save/3","type":"function"},{"doc":"Represents different kind of models that can be used across the library.","ref":"Tokenizers.Model.html#t:t/0","title":"Tokenizers.Model.t/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.BPE.html","title":"Tokenizers.Model.BPE","type":"module"},{"doc":"Instantiate an empty BPE model.","ref":"Tokenizers.Model.BPE.html#empty/0","title":"Tokenizers.Model.BPE.empty/0","type":"function"},{"doc":"Instantiate a BPE model from the given vocab and merges files.","ref":"Tokenizers.Model.BPE.html#from_file/3","title":"Tokenizers.Model.BPE.from_file/3","type":"function"},{"doc":"Instantiate a BPE model from the given vocab and merges.","ref":"Tokenizers.Model.BPE.html#init/3","title":"Tokenizers.Model.BPE.init/3","type":"function"},{"doc":"Options for model initialisation.\n\n  * `:byte_fallback`- whether to use the byte fallback trick\n\n  * `:cache_capacity` - the number of words that the BPE cache can\n    contain. The cache allows to speed-up the process by keeping\n    the result of the merge operations for a number of words.\n    Defaults to `10_000`\n\n  * `:dropout` - The BPE dropout to use. Must be an float between\n    0 and 1\n\n  * `:unk_token` - The unknown token to be used by the model\n\n  * `:continuing_subword_prefix` - The prefix to attach to subword\n    units that don't represent a beginning of word\n\n  * `:end_of_word_suffix` - The suffix to attach to subword units\n    that represent an end of word","ref":"Tokenizers.Model.BPE.html#t:options/0","title":"Tokenizers.Model.BPE.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.Unigram.html","title":"Tokenizers.Model.Unigram","type":"module"},{"doc":"Instantiate an empty Unigram model","ref":"Tokenizers.Model.Unigram.html#empty/0","title":"Tokenizers.Model.Unigram.empty/0","type":"function"},{"doc":"Instantiate a Unigram model from the given vocab.","ref":"Tokenizers.Model.Unigram.html#init/2","title":"Tokenizers.Model.Unigram.init/2","type":"function"},{"doc":"Options for model initialisation.\n\n  * `:byte_fallback`- whether to use the byte fallback trick\n  * `:unk_id`- the unknown token id to be used by the model","ref":"Tokenizers.Model.Unigram.html#t:options/0","title":"Tokenizers.Model.Unigram.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.WordLevel.html","title":"Tokenizers.Model.WordLevel","type":"module"},{"doc":"Instantiate an empty WordLevel model.","ref":"Tokenizers.Model.WordLevel.html#empty/0","title":"Tokenizers.Model.WordLevel.empty/0","type":"function"},{"doc":"Instantiate a WordLevel model from the given vocab file.","ref":"Tokenizers.Model.WordLevel.html#from_file/2","title":"Tokenizers.Model.WordLevel.from_file/2","type":"function"},{"doc":"Instantiate a WordLevel model from the given vocab.","ref":"Tokenizers.Model.WordLevel.html#init/2","title":"Tokenizers.Model.WordLevel.init/2","type":"function"},{"doc":"Options for model initialisation.\n\n  * `:unk_token` - the unknown token to be used by the model. Defaults\n    to \"[UNK]\"","ref":"Tokenizers.Model.WordLevel.html#t:options/0","title":"Tokenizers.Model.WordLevel.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.WordPiece.html","title":"Tokenizers.Model.WordPiece","type":"module"},{"doc":"Instantiate an empty WordPiece model.","ref":"Tokenizers.Model.WordPiece.html#empty/0","title":"Tokenizers.Model.WordPiece.empty/0","type":"function"},{"doc":"Instantiate a WordPiece model from the given vocab file.","ref":"Tokenizers.Model.WordPiece.html#from_file/2","title":"Tokenizers.Model.WordPiece.from_file/2","type":"function"},{"doc":"Instantiate a WordPiece model from the given vocab.","ref":"Tokenizers.Model.WordPiece.html#init/2","title":"Tokenizers.Model.WordPiece.init/2","type":"function"},{"doc":"Options for model initialisation.\n\n  * `:unk_token`  - the unknown token to be used by the model.\n    Defaults to `\"[UNK]\"`\n\n  * `:max_input_chars_per_word` - the maximum number of characters\n    to authorize in a single word. Defaults to `100`\n\n  * `:continuing_subword_prefix`  - the prefix to attach to subword\n    units that don't represent a beginning of word Defaults to `\"##\"`","ref":"Tokenizers.Model.WordPiece.html#t:options/0","title":"Tokenizers.Model.WordPiece.options/0","type":"type"},{"doc":"A Trainer has the responsibility to train a model.\nWe feed it with lines/sentences and then it can train the given Model.","ref":"Tokenizers.Trainer.html","title":"Tokenizers.Trainer","type":"module"},{"doc":"Creates a new BPE Trainer.","ref":"Tokenizers.Trainer.html#bpe/1","title":"Tokenizers.Trainer.bpe/1","type":"function"},{"doc":"Get trainer info","ref":"Tokenizers.Trainer.html#info/1","title":"Tokenizers.Trainer.info/1","type":"function"},{"doc":"Creates a new Unigram Trainer.","ref":"Tokenizers.Trainer.html#unigram/1","title":"Tokenizers.Trainer.unigram/1","type":"function"},{"doc":"Creates a new WordLevel Trainer.","ref":"Tokenizers.Trainer.html#wordlevel/1","title":"Tokenizers.Trainer.wordlevel/1","type":"function"},{"doc":"Creates a new WordPiece Trainer.","ref":"Tokenizers.Trainer.html#wordpiece/1","title":"Tokenizers.Trainer.wordpiece/1","type":"function"},{"doc":"Options for BPE trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:bpe_options/0","title":"Tokenizers.Trainer.bpe_options/0","type":"type"},{"doc":"","ref":"Tokenizers.Trainer.html#t:t/0","title":"Tokenizers.Trainer.t/0","type":"type"},{"doc":"Options for Unigram trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:unigram_options/0","title":"Tokenizers.Trainer.unigram_options/0","type":"type"},{"doc":"Options for WordLevel trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:wordlevel_options/0","title":"Tokenizers.Trainer.wordlevel_options/0","type":"type"},{"doc":"Options for WordPiece trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:wordpiece_options/0","title":"Tokenizers.Trainer.wordpiece_options/0","type":"type"},{"doc":"A simple implementation of an HTTP client.\n\nThis is using the built-in `:httpc` module, configured to use SSL.\nThe `request/1` function is similar to `Req.request/1`.","ref":"Tokenizers.HTTPClient.html","title":"Tokenizers.HTTPClient","type":"module"},{"doc":"Make an HTTP(s) requests.","ref":"Tokenizers.HTTPClient.html#request/1","title":"Tokenizers.HTTPClient.request/1","type":"function"},{"doc":"* `:method` - An HTTP method. By default it uses the `:get` method.\n\n  * `:base_url` - The base URL to make requests. By default is \"https://huggingface.io\".\n\n  * `:url` - A path to a resource. By default is \"\".\n\n  * `:headers` - A list of tuples representing HTTP headers. By default it's empty.","ref":"Tokenizers.HTTPClient.html#request/1-options","title":"Options - Tokenizers.HTTPClient.request/1","type":"function"},{"doc":"# Pretrained tokenizers\n\n```elixir\nMix.install([\n  {:kino, \"~> 0.10.0\"},\n  {:scidata, \"~> 0.1.5\"},\n  {:tokenizers, \"~> 0.4.0\"},\n  {:nx, \"~> 0.5\"}\n])\n```","ref":"pretrained.html","title":"Pretrained tokenizers","type":"extras"},{"doc":"This Livebook will demonstrate how to use `Tokenizers` with pretrained tokenizers available on the [Hugging Face Hub](https://huggingface.co/models).\n\nWe'll install `Kino` for user input and `SciData` for real data to tokenize.\n\nCheck **_Notebook dependencies and setup_** section at the beginning of this notebook\n\n \n\nWe'll alias modules in `Tokenizers` for readability. For now, the two main entry points into `Tokenizers` are the `Tokenizer` and `Encoding` modules.\n\n```elixir\nalias Tokenizers.Tokenizer\nalias Tokenizers.Encoding\n```","ref":"pretrained.html#setup","title":"Setup - Pretrained tokenizers","type":"extras"},{"doc":"The first thing to do is get a tokenizer from the hub. I've chosen `bert-base-cased` here as it's commonly used in Hugging Face examples. This call will download the tokenizer from the hub and load it into memory.\n\n```elixir\n{:ok, tokenizer} = Tokenizer.from_pretrained(\"bert-base-cased\")\n```","ref":"pretrained.html#get-a-tokenizer","title":"Get a tokenizer - Pretrained tokenizers","type":"extras"},{"doc":"You can save and load models. That means you can load in tokenizers you may have trained locally!\n\nYou can choose the path with the Kino input below.\n\n```elixir\ninput = Kino.Input.text(\"Path\")\n```\n\n```elixir\npath = Kino.Input.read(input)\nTokenizer.save(tokenizer, path)\n```\n\n```elixir\n{:ok, tokenizer} = Tokenizer.from_file(path)\n```","ref":"pretrained.html#save-and-load","title":"Save and load - Pretrained tokenizers","type":"extras"},{"doc":"Let's see what we can do with the tokenizer. First, let's have a look at the vocab. It's represented as a map of tokens to ids.\n\n```elixir\nvocab = Tokenizer.get_vocab(tokenizer)\n```\n\nWe can access an id using the vocab, but we don't need to extract the vocab. `Tokenizer.token_to_id/2` does the job for us.\n\n```elixir\nvocab[\"Jaguar\"]\n```\n\n```elixir\nTokenizer.token_to_id(tokenizer, \"Jaguar\")\n```\n\nAnd if we want to go back the other way...\n\n```elixir\nTokenizer.id_to_token(tokenizer, 21694)\n```\n\nWe can also see the vocab size.\n\n```elixir\nTokenizer.get_vocab_size(tokenizer)\n```","ref":"pretrained.html#check-the-tokenizer","title":"Check the tokenizer - Pretrained tokenizers","type":"extras"},{"doc":"When you tokenize some text you get an encoding. This is represented as `Tokenizers.Encoding.t()`. Because `Tokenizers` relies on Rust bindings, the encoding itself appears opaque.\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, \"Hello there!\")\n```\n\nHowever, we can get the ids for the encoding as an Elixir list.\n\n```elixir\nids = Encoding.get_ids(encoding)\n```\n\nAnd we can decode those back into tokens.\n\n```elixir\nTokenizer.decode(tokenizer, ids)\n```\n\nPassing a batch of text as a list of strings returns a batch of encodings.\n\n```elixir\n{:ok, encodings} = Tokenizer.encode_batch(tokenizer, [\"Hello there!\", \"This is a test.\"])\n```\n\nAnd we can see the list of ids and decode them again.\n\n```elixir\nlist_of_ids = Enum.map(encodings, &Encoding.get_ids/1)\n```\n\n```elixir\nTokenizer.decode_batch(tokenizer, list_of_ids)\n```","ref":"pretrained.html#encode-and-decode","title":"Encode and decode - Pretrained tokenizers","type":"extras"},{"doc":"Typically the reason we're tokenizing text is to use it as an input in a machine learning model. For that, we'll need tensors.\n\nIn order to get a tensor, we need sequences that are all of the same length. We'll get some data from `Scidata` and use `Tokenizers.Encoding.pad/3` and `Tokenizers.Encoding.truncate/3` to yield a tensor.\n\n```elixir\n%{review: reviews} = Scidata.YelpPolarityReviews.download_test()\n```\n\n```elixir\n{:ok, encoding_batch} =\n  reviews\n  |> Enum.take(10)\n  |> then(&Tokenizer.encode_batch(tokenizer, &1))\n\ntensor =\n  encoding_batch\n  |> Enum.map(fn encoding ->\n    encoding\n    |> Encoding.pad(200)\n    |> Encoding.truncate(200)\n    |> Encoding.get_ids()\n  end)\n  |> Nx.tensor()\n```\n\nAnd we can reverse the operation to see our data. Note the `[PAD]` tokens.\n\n```elixir\ntensor\n|> Nx.to_batched(1)\n|> Enum.map(&Nx.to_flat_list/1)\n|> then(&Tokenizer.decode_batch(tokenizer, &1))\n```","ref":"pretrained.html#get-a-tensor","title":"Get a tensor - Pretrained tokenizers","type":"extras"},{"doc":"# Training custom tokenizer\n\n```elixir\nMix.install([\n  {:tokenizers, \"~> 0.4.0\"},\n  {:req, \"~> 0.3.8\"}\n])\n```","ref":"training.html","title":"Training custom tokenizer","type":"extras"},{"doc":"Let‚Äôs have a quick look at the ü§ó Tokenizers library features. The library provides an implementation of today‚Äôs most used tokenizers that is both easy to use and blazing fast.","ref":"training.html#intro","title":"Intro - Training custom tokenizer","type":"extras"},{"doc":"To illustrate how fast the ü§ó Tokenizers library is, let‚Äôs train a new tokenizer on wikitext-103 (516M of text) in just a few seconds. First things first, you will need to download this dataset and unzip it with:\n\n```bash\nwget https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-raw-v1.zip\nunzip wikitext-103-raw-v1.zip\n```\n\n \n\nAlternatively you can run this code:\n\n```elixir\nReq.get!(\"https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-raw-v1.zip\").body\n|> Enum.each(fn {filename, data} ->\n  filename = to_string(filename)\n  path = Path.join(__DIR__, filename)\n  IO.puts(\"Writing #{filename} to path #{path}\")\n\n  :ok = File.mkdir_p!(Path.dirname(path))\n  File.write!(path, data, [:write])\nend)\n```","ref":"training.html#downloading-the-data","title":"Downloading the data - Training custom tokenizer","type":"extras"},{"doc":"```elixir\nalias Tokenizers.Tokenizer\nalias Tokenizers.Trainer\nalias Tokenizers.PostProcessor\nalias Tokenizers.PreTokenizer\nalias Tokenizers.Model\nalias Tokenizers.Encoding\n```\n\nIn this tour, we will build and train a Byte-Pair Encoding (BPE) tokenizer. For more information about the different type of tokenizers, check out this guide in the ü§ó Transformers documentation. Here, training the tokenizer means it will learn merge rules by:\n\n* Start with all the characters present in the training corpus as tokens.\n* Identify the most common pair of tokens and merge it into one token.\n* Repeat until the vocabulary (e.g., the number of tokens) has reached the size we want.\n\nThe main API of the library is the class Tokenizer, here is how we instantiate one with a BPE model:\n\n```elixir\n{:ok, model} = Model.BPE.init(%{}, [], unk_token: \"[UNK]\")\n{:ok, tokenizer} = Tokenizer.init(model)\n```\n\nTo train our tokenizer on the wikitext files, we will need to instantiate a **trainer**, in this case a BPE trainer:\n\n```elixir\n{:ok, trainer} = Trainer.bpe(special_tokens: [\"[UNK]\", \"[CLS]\", \"[SEP]\", \"[PAD]\", \"[MASK]\"])\n```\n\nWe can set the training arguments like `vocab_size` or `min_frequency` (here left at their default values of `30,000` and `0`), but the most important part is to give the `special_tokens` we plan to use later on (they are not used at all during training) so that they get inserted in the vocabulary.\n\n> The order in which you write the special tokens list matters: here `\"[UNK]\"` will get the ID `0`, `\"[CLS]\"` will get the ID `1` and so forth.\n\nWe could train our tokenizer right now, but it wouldn't be optimal. Without a pre-tokenizer that will split our inputs into words, we might get tokens that overlap several words: for instance we could get an \"it is\" token since those two words often appear next to each other. Using a pre-tokenizer will ensure no token is bigger than a word returned by the pre-tokenizer. Here we want to train a subword BPE tokenizer, and we will use the easiest pre-tokenizer possible by splitting on whitespace.\n\n```elixir\ntokenizer = Tokenizer.set_pre_tokenizer(tokenizer, PreTokenizer.whitespace())\n```\n\nNow, we can just call the `Tokenizer.train_from_files/3` function with the list of files we want to train on:\n\n```elixir\n{:ok, tokenizer} =\n  [\n    \"wikitext-103-raw/wiki.test.raw\",\n    \"wikitext-103-raw/wiki.train.raw\",\n    \"wikitext-103-raw/wiki.valid.raw\"\n  ]\n  |> Enum.map(&Path.join(__DIR__, &1))\n  |> then(&Tokenizer.train_from_files(tokenizer, &1, trainer: trainer))\n```\n\nThis should only take a few seconds to train our tokenizer on the full wikitext dataset! To save the tokenizer in one file that contains all its configuration and vocabulary, just use the `Tokenizer.save/2` function:\n\n```elixir\nTokenizer.save(tokenizer, Path.join(__DIR__, \"tokenizer-wiki.json\"))\n```\n\nand you can reload your tokenizer from that file with the `Tokenizer.from_file/1` function:\n\n```elixir\n{:ok, tokenizer} = Tokenizer.from_file(Path.join(__DIR__, \"tokenizer-wiki.json\"))\n```","ref":"training.html#training-the-tokenizer-from-scratch","title":"Training the tokenizer from scratch - Training custom tokenizer","type":"extras"},{"doc":"Now that we have trained a tokenizer, we can use it on any text we want with the `Tokenizer.encode/1` function:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, \"Hello, y'all! How are you üòÅ ?\")\n```\n\nThis applied the full pipeline of the tokenizer on the text, returning an `encoding`. To learn more about this pipeline, and how to apply (or customize) parts of it, check out [this page](https://huggingface.co/docs/tokenizers/pipeline).\n\nThis `encoding` then has all the attributes you need for your deep learning model (or other). The tokens attribute contains the segmentation of your text in tokens:\n\n```elixir\nEncoding.get_tokens(encoding)\n```\n\nSimilarly, the ids attribute will contain the index of each of those tokens in the tokenizer‚Äôs vocabulary:\n\n```elixir\nEncoding.get_ids(encoding)\n```\n\nAn important feature of the ü§ó Tokenizers library is that it comes with full alignment tracking, meaning you can always get the part of your original sentence that corresponds to a given token. Those are stored in the offsets attribute of our Encoding object. For instance, let‚Äôs assume we would want to find back what caused the \"[UNK]\" token to appear, which is the token at index 9 in the list, we can just ask for the offset at the index:\n\n```elixir\n{emoji_offset_start, emoji_offset_end} = Encoding.get_offsets(encoding) |> Enum.at(9)\n```\n\nand those are the indices that correspond to the emoji in the original sentence:\n\n```elixir\n:binary.part(\n  \"Hello, y'all! How are you üòÅ ?\",\n  emoji_offset_start,\n  # Length\n  emoji_offset_end - emoji_offset_start\n)\n```","ref":"training.html#using-the-tokenizer","title":"Using the tokenizer - Training custom tokenizer","type":"extras"},{"doc":"We might want our tokenizer to automatically add special tokens, like `[CLS]` or `[SEP]`. To do this, we use a post-processor. Template post-processing is the most commonly used, you just have to specify a template for the processing of single sentences and pairs of sentences, along with the special tokens and their IDs.\n\nWhen we built our tokenizer, we set `[CLS]` and `[SEP]` in positions 1 and 2 of our list of special tokens, so this should be their IDs. To double-check, we can use the `Tokenizer.token_to_id/2` function:\n\n```elixir\nTokenizer.token_to_id(tokenizer, \"[SEP]\")\n```\n\nHere is how we can set the post-processing to give us the traditional BERT inputs:\n\n```elixir\ntokenizer =\n  Tokenizer.set_post_processor(\n    tokenizer,\n    PostProcessor.template(\n      single: \"[CLS] $A [SEP]\",\n      pair: \"[CLS] $A [SEP] $B:1 [SEP]:1\",\n      special_tokens: [\n        {\"[CLS]\", Tokenizer.token_to_id(tokenizer, \"[CLS]\")},\n        {\"[SEP]\", Tokenizer.token_to_id(tokenizer, \"[SEP]\")}\n      ]\n    )\n  )\n```\n\nLet's go over this snippet of code in more details. First we specify the template for single sentences: those should have the form `\"[CLS] $A [SEP]\"` where `$A` represents our sentence.\n\nThen, we specify the template for sentence pairs, which should have the form `\"[CLS] $A [SEP] $B [SEP]\"` where `$A` represents the first sentence and `$B` the second one. The `:1` added in the template represent the type IDs we want for each part of our input: it defaults to `0` for everything (which is why we don't have `$A:0`) and here we set it to 1 for the tokens of the second sentence and the last `\"[SEP]\"` token.\n\nLastly, we specify the special tokens we used and their IDs in our tokenizer's vocabulary.\n\nTo check out this worked properly, let's try to encode the same sentence as before:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, \"Hello, y'all! How are you üòÅ ?\")\nEncoding.get_tokens(encoding)\n```\n\nTo check the results on a pair of sentences, we just pass the two sentences to `Tokenizer.encode/2`:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, {\"Hello, y'all!\", \"How are you üòÅ ?\"})\nEncoding.get_tokens(encoding)\n```\n\nYou can then check the type IDs attributed to each token is correct with\n\n```elixir\nEncoding.get_type_ids(encoding)\n```\n\nIf you save your tokenizer with `Tokenizer.save/2`, the post-processor will be saved along.","ref":"training.html#post-processing","title":"Post-processing - Training custom tokenizer","type":"extras"},{"doc":"To get the full speed of the ü§ó Tokenizers library, it's best to process your texts by batches by using the `Tokenizer.encode_batch/2` function:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode_batch(tokenizer, [\"Hello, y'all!\", \"How are you üòÅ ?\"])\n```\n\nThe output is then a list of `encoding`s like the ones we saw before. You can process together as many texts as you like, as long as it fits in memory.\n\nTo process a batch of sentence pairs, pass a list of tuples to the `Tokenizer.encode_batch/2` function:\n\n```elixir\n{:ok, encoding} =\n  Tokenizer.encode_batch(tokenizer, [\n    {\"Hello, y'all!\", \"How are you üòÅ ?\"},\n    {\n      \"Hello to you too!\",\n      \"I'm fine, thank you!\"\n    }\n  ])\n```\n\nWhen encoding multiple sentences, you can automatically pad the outputs to the longest sentence present by using `Tokenizer.set_padding/2`, with the `pad_token` and its ID (which we can double-check the id for the padding token with `Tokenizer.token_to_id/2` like before):\n\n```elixir\ntokenizer = Tokenizer.set_padding(tokenizer, pad_id: 3, pad_token: \"[PAD]\")\n```\n\nWe can set the direction of the padding (defaults to the right) or a given length if we want to pad every sample to that specific number (here we leave it unset to pad to the size of the longest text).\n\n```elixir\n{:ok, encoding} = Tokenizer.encode_batch(tokenizer, [\"Hello, y'all!\", \"How are you üòÅ ?\"])\n\nencoding\n|> Enum.at(1)\n|> Encoding.get_tokens()\n```\n\nIn this case, the attention mask generated by the tokenizer takes the padding into account:\n\n```elixir\nencoding\n|> Enum.at(1)\n|> Encoding.get_attention_mask()\n```","ref":"training.html#encoding-multiple-sentences-in-a-batch","title":"Encoding multiple sentences in a batch - Training custom tokenizer","type":"extras"},{"doc":"Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS","ref":"license.html","title":"LICENSE","type":"extras"}]}