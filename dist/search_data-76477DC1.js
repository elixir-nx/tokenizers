searchData={"content_type":"text/markdown","items":[{"doc":"Elixir bindings to [Hugging Face Tokenizers](https://github.com/huggingface/tokenizers).\n\nHugging Face describes the Tokenizers library as:\n\n> Fast State-of-the-art tokenizers, optimized for both research and production\n>\n> ü§ó Tokenizers provides an implementation of today‚Äôs most used tokenizers, with a focus on performance and versatility. These tokenizers are also used in ü§ó Transformers.\n\nThis library has bindings to use pretrained tokenizers. Support for building and training\na tokenizer from scratch is forthcoming.\n\nA tokenizer is effectively a pipeline of transforms to take some input text and return a\n`Tokenizers.Encoding.t()`. The main entrypoint to this library is the `Tokenizers.Tokenizer`\nmodule, which holds the `Tokenizers.Tokenizer.t()` struct, a container holding the constituent\nparts of the pipeline. Most functionality is there.","ref":"Tokenizers.html","title":"Tokenizers","type":"module"},{"doc":"This struct represents AddedTokens","ref":"Tokenizers.AddedToken.html","title":"Tokenizers.AddedToken","type":"module"},{"doc":"Retrieves information about added token.","ref":"Tokenizers.AddedToken.html#info/1","title":"Tokenizers.AddedToken.info/1","type":"function"},{"doc":"Create a new AddedToken.\n\n* `:special` (default `false`) - defines whether this token is a special token.\n\n* `:single_word` (default `false`) - defines whether this token should only match single words.\n  If `true`, this token will never match inside of a word. For example the token `ing` would\n  match on `tokenizing` if this option is `false`, but not if it is `true`.\n  The notion of ‚Äùinside of a word‚Äù is defined by the word boundaries pattern\n  in regular expressions (i.e. the token should start and end with word boundaries).\n\n* `:lstrip` (default `false`) - defines whether this token should strip all potential\n  whitespaces on its left side.\n  If `true`, this token will greedily match any whitespace on its left.\n  For example if we try to match the token `[MASK]` with `lstrip=true`,\n  in the text `\"I saw a [MASK]\"`, we would match on `\" [MASK]\"`. (Note the space on the left).\n\n* `:rstrip` (default `false`) - defines whether this token should strip all potential\n  whitespaces on its right side.\n  If `true`, this token will greedily match any whitespace on its right.\n  It works just like `lstrip` but on the right.\n\n* `:normalized` (default `true` for not special tokens, `false` for special tokens) -\n  defines whether this token should match against the normalized version of the input text.\n  For example, with the added token `\"yesterday\"`,\n  and a normalizer in charge of lowercasing the text,\n  the token could be extract from the input `\"I saw a lion Yesterday\"`.\n  If `true`, the token will be extracted from the normalized input `\"i saw a lion yesterday\"`.\n  If `false`, the token will be extracted from the original input `\"I saw a lion Yesterday\"`.","ref":"Tokenizers.AddedToken.html#new/2","title":"Tokenizers.AddedToken.new/2","type":"function"},{"doc":"Options for added token initialisation. All options can be ommited.","ref":"Tokenizers.AddedToken.html#t:opts/0","title":"Tokenizers.AddedToken.opts/0","type":"type"},{"doc":"","ref":"Tokenizers.AddedToken.html#t:t/0","title":"Tokenizers.AddedToken.t/0","type":"type"},{"doc":"The Decoder knows how to go from the IDs used by the Tokenizer, back to a readable piece of text.\nSome Normalizer and PreTokenizer use special characters or identifiers that need to be reverted.","ref":"Tokenizers.Decoder.html","title":"Tokenizers.Decoder","type":"module"},{"doc":"Creates new BPE decoder","ref":"Tokenizers.Decoder.html#bpe/1","title":"Tokenizers.Decoder.bpe/1","type":"function"},{"doc":"Creates new ByteFallback decoder","ref":"Tokenizers.Decoder.html#byte_fallback/0","title":"Tokenizers.Decoder.byte_fallback/0","type":"function"},{"doc":"Creates new ByteLevel decoder","ref":"Tokenizers.Decoder.html#byte_level/0","title":"Tokenizers.Decoder.byte_level/0","type":"function"},{"doc":"Creates new CTC decoder","ref":"Tokenizers.Decoder.html#ctc/1","title":"Tokenizers.Decoder.ctc/1","type":"function"},{"doc":"Decodes tokens into string with provided decoder.","ref":"Tokenizers.Decoder.html#decode/2","title":"Tokenizers.Decoder.decode/2","type":"function"},{"doc":"Creates new Fuse decoder","ref":"Tokenizers.Decoder.html#fuse/0","title":"Tokenizers.Decoder.fuse/0","type":"function"},{"doc":"Creates new Metaspace decoder","ref":"Tokenizers.Decoder.html#metaspace/1","title":"Tokenizers.Decoder.metaspace/1","type":"function"},{"doc":"Creates new Replace decoder","ref":"Tokenizers.Decoder.html#replace/2","title":"Tokenizers.Decoder.replace/2","type":"function"},{"doc":"Creates new Sequence decoder","ref":"Tokenizers.Decoder.html#sequence/1","title":"Tokenizers.Decoder.sequence/1","type":"function"},{"doc":"Creates new Strip decoder.\n\nIt expects a character and the number of times to strip the\ncharacter on `left` and `right` sides.","ref":"Tokenizers.Decoder.html#strip/3","title":"Tokenizers.Decoder.strip/3","type":"function"},{"doc":"Creates new WordPiece decoder","ref":"Tokenizers.Decoder.html#word_piece/1","title":"Tokenizers.Decoder.word_piece/1","type":"function"},{"doc":"Options for BPE decoder initialization. All options can be ommited.\n\n* `suffix` - The suffix to add to the end of each word, defaults to ` `","ref":"Tokenizers.Decoder.html#t:bpe_options/0","title":"Tokenizers.Decoder.bpe_options/0","type":"type"},{"doc":"Options for CTC decoder initialization. All options can be ommited.\n\n* `pad_token` - The token used for padding, defaults to ` `\n* `word_delimiter_token` - The token used for word delimiter, defaults to `|`\n* `cleanup` - Whether to cleanup tokenization artifacts, defaults to `true`","ref":"Tokenizers.Decoder.html#t:ctc_options/0","title":"Tokenizers.Decoder.ctc_options/0","type":"type"},{"doc":"Options for Metaspace decoder initialization. All options can be ommited.\n\n* `replacement` - The replacement character, defaults to `‚ñÅ` (as char)\n* `add_prefix_space` - Whether to add a space to the first word, defaults to `true`","ref":"Tokenizers.Decoder.html#t:metaspace_options/0","title":"Tokenizers.Decoder.metaspace_options/0","type":"type"},{"doc":"","ref":"Tokenizers.Decoder.html#t:t/0","title":"Tokenizers.Decoder.t/0","type":"type"},{"doc":"Options for WordPiece decoder initialization. All options can be ommited.\n\n* `prefix` - The prefix to use for subwords, defaults to `##`\n* `cleanup` - Whether to cleanup tokenization artifacts, defaults to `true`","ref":"Tokenizers.Decoder.html#t:word_piece_options/0","title":"Tokenizers.Decoder.word_piece_options/0","type":"type"},{"doc":"The struct and associated functions for an encoding, the output of a tokenizer.\n\nUse these functions to retrieve the inputs needed for a natural language processing machine learning model.","ref":"Tokenizers.Encoding.html","title":"Tokenizers.Encoding","type":"module"},{"doc":"Get the token that contains the given char.","ref":"Tokenizers.Encoding.html#char_to_token/3","title":"Tokenizers.Encoding.char_to_token/3","type":"function"},{"doc":"Get the word that contains the given char.","ref":"Tokenizers.Encoding.html#char_to_word/3","title":"Tokenizers.Encoding.char_to_word/3","type":"function"},{"doc":"Get the attention mask from an encoding.","ref":"Tokenizers.Encoding.html#get_attention_mask/1","title":"Tokenizers.Encoding.get_attention_mask/1","type":"function"},{"doc":"Get the ids from an encoding.","ref":"Tokenizers.Encoding.html#get_ids/1","title":"Tokenizers.Encoding.get_ids/1","type":"function"},{"doc":"Get the number of tokens in an encoding.","ref":"Tokenizers.Encoding.html#get_length/1","title":"Tokenizers.Encoding.get_length/1","type":"function"},{"doc":"Return the number of sequences combined in this Encoding","ref":"Tokenizers.Encoding.html#get_n_sequences/1","title":"Tokenizers.Encoding.get_n_sequences/1","type":"function"},{"doc":"Get offsets from an encoding.\n\nThe offsets are expressed in terms of UTF-8 bytes.","ref":"Tokenizers.Encoding.html#get_offsets/1","title":"Tokenizers.Encoding.get_offsets/1","type":"function"},{"doc":"Get the overflow from an encoding.","ref":"Tokenizers.Encoding.html#get_overflowing/1","title":"Tokenizers.Encoding.get_overflowing/1","type":"function"},{"doc":"Get sequence ids from an encoding.","ref":"Tokenizers.Encoding.html#get_sequence_ids/1","title":"Tokenizers.Encoding.get_sequence_ids/1","type":"function"},{"doc":"Get the special tokens mask from an encoding.","ref":"Tokenizers.Encoding.html#get_special_tokens_mask/1","title":"Tokenizers.Encoding.get_special_tokens_mask/1","type":"function"},{"doc":"Get the tokens from an encoding.","ref":"Tokenizers.Encoding.html#get_tokens/1","title":"Tokenizers.Encoding.get_tokens/1","type":"function"},{"doc":"Get token type ids from an encoding.","ref":"Tokenizers.Encoding.html#get_type_ids/1","title":"Tokenizers.Encoding.get_type_ids/1","type":"function"},{"doc":"Same as `get_attention_mask/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_attention_mask/1","title":"Tokenizers.Encoding.get_u32_attention_mask/1","type":"function"},{"doc":"Same as `get_ids/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_ids/1","title":"Tokenizers.Encoding.get_u32_ids/1","type":"function"},{"doc":"Same as `get_special_tokens_mask/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_special_tokens_mask/1","title":"Tokenizers.Encoding.get_u32_special_tokens_mask/1","type":"function"},{"doc":"Same as `get_type_ids/1`, but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_type_ids/1","title":"Tokenizers.Encoding.get_u32_type_ids/1","type":"function"},{"doc":"Get word ids from an encoding.","ref":"Tokenizers.Encoding.html#get_word_ids/1","title":"Tokenizers.Encoding.get_word_ids/1","type":"function"},{"doc":"Returns the number of tokens in an `t()`.","ref":"Tokenizers.Encoding.html#n_tokens/1","title":"Tokenizers.Encoding.n_tokens/1","type":"function"},{"doc":"Pad the encoding to the given length.","ref":"Tokenizers.Encoding.html#pad/3","title":"Tokenizers.Encoding.pad/3","type":"function"},{"doc":"Set the given sequence id for the whole range of tokens contained in this Encoding.","ref":"Tokenizers.Encoding.html#set_sequence_id/2","title":"Tokenizers.Encoding.set_sequence_id/2","type":"function"},{"doc":"Get the offsets of the token at the given index.","ref":"Tokenizers.Encoding.html#token_to_chars/2","title":"Tokenizers.Encoding.token_to_chars/2","type":"function"},{"doc":"Returns the index of the sequence containing the given token","ref":"Tokenizers.Encoding.html#token_to_sequence/2","title":"Tokenizers.Encoding.token_to_sequence/2","type":"function"},{"doc":"Get the word that contains the token at the given index.","ref":"Tokenizers.Encoding.html#token_to_word/2","title":"Tokenizers.Encoding.token_to_word/2","type":"function"},{"doc":"Truncate the encoding to the given length.","ref":"Tokenizers.Encoding.html#truncate/3","title":"Tokenizers.Encoding.truncate/3","type":"function"},{"doc":"Get the offsets of the word at the given index in the input sequence.","ref":"Tokenizers.Encoding.html#word_to_chars/3","title":"Tokenizers.Encoding.word_to_chars/3","type":"function"},{"doc":"Get the encoded tokens corresponding to the word at the given index in the input sequence,\nwith the form (start_token, end_token + 1)","ref":"Tokenizers.Encoding.html#word_to_tokens/3","title":"Tokenizers.Encoding.word_to_tokens/3","type":"function"},{"doc":"Options for padding. All options can be ommited.\n\n* `direction` (default `:right`) - The padding direction.\n* `pad_id` (default `0`) - The id corresponding to the padding token.\n* `pad_type_id` (default `0`) - The type ID corresponding to the padding token.\n* `pad_token` (default `[PAD]`) - The padding token to use.","ref":"Tokenizers.Encoding.html#t:padding_opts/0","title":"Tokenizers.Encoding.padding_opts/0","type":"type"},{"doc":"","ref":"Tokenizers.Encoding.html#t:t/0","title":"Tokenizers.Encoding.t/0","type":"type"},{"doc":"Options for truncation. All options can be ommited.\n\n* `stride` (default `0`) - The length of previous content to be included in each overflowing piece.\n* `direction` (default `:right`) - The truncation direction.","ref":"Tokenizers.Encoding.html#t:truncation_opts/0","title":"Tokenizers.Encoding.truncation_opts/0","type":"type"},{"doc":"A simple implementation of an HTTP client.\n\nThis is using the built-in `:httpc` module, configured to use SSL.\nThe `request/1` function is similar to `Req.request/1`.","ref":"Tokenizers.HTTPClient.html","title":"Tokenizers.HTTPClient","type":"module"},{"doc":"Make an HTTP(s) requests.","ref":"Tokenizers.HTTPClient.html#request/1","title":"Tokenizers.HTTPClient.request/1","type":"function"},{"doc":"* `:method` - An HTTP method. By default it uses the `:get` method.\n\n  * `:base_url` - The base URL to make requests. By default is \"https://huggingface.io\". \n\n  * `:url` - A path to a resource. By default is \"\".\n\n  * `:headers` - A list of tuples representing HTTP headers. By default it's empty.","ref":"Tokenizers.HTTPClient.html#request/1-options","title":"Options - Tokenizers.HTTPClient.request/1","type":"function"},{"doc":"The struct and associated functions for the tokenizer model.","ref":"Tokenizers.Model.html","title":"Tokenizers.Model","type":"module"},{"doc":"Retrieves information about the model.\n\nInformation retrieved differs per model but all include `model_type`.","ref":"Tokenizers.Model.html#info/1","title":"Tokenizers.Model.info/1","type":"function"},{"doc":"Save the current model in the given folder, using the given name for the various files that will get created.\nAny file with the same name that already exist in this folder will be overwritten.","ref":"Tokenizers.Model.html#save/3","title":"Tokenizers.Model.save/3","type":"function"},{"doc":"Options to save the model. All options can be ommited.\n\n* `:prefix` (default `\"\"`) - The prefix to use for all the files that will get created.","ref":"Tokenizers.Model.html#t:save_opts/0","title":"Tokenizers.Model.save_opts/0","type":"type"},{"doc":"Represents different kind of models that can be used across the library.","ref":"Tokenizers.Model.html#t:t/0","title":"Tokenizers.Model.t/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.BPE.html","title":"Tokenizers.Model.BPE","type":"module"},{"doc":"Instantiate an empty BPE Model","ref":"Tokenizers.Model.BPE.html#empty/0","title":"Tokenizers.Model.BPE.empty/0","type":"function"},{"doc":"Instantiate a BPE model from the given vocab and merges files","ref":"Tokenizers.Model.BPE.html#from_file/3","title":"Tokenizers.Model.BPE.from_file/3","type":"function"},{"doc":"Instantiate a BPE model from the given vocab and merges","ref":"Tokenizers.Model.BPE.html#init/3","title":"Tokenizers.Model.BPE.init/3","type":"function"},{"doc":"Options for model initialisation. All options can be ommited.\n\n* `:cache_capacity` (default `10_000`) - The number of words that the BPE cache can contain.\n  The cache allows to speed-up the process by keeping\n  the result of the merge operations for a number of words.\n* `:dropout` - The BPE dropout to use. Must be an float between 0 and 1\n* `:unk_token` - The unknown token to be used by the model\n* `:continuing_subword_prefix` - The prefix to attach to subword units that don't represent a beginning of word\n* `:end_of_word_suffix` - The suffix to attach to subword units that represent an end of word","ref":"Tokenizers.Model.BPE.html#t:options/0","title":"Tokenizers.Model.BPE.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.Unigram.html","title":"Tokenizers.Model.Unigram","type":"module"},{"doc":"Instantiate an empty Unigram model","ref":"Tokenizers.Model.Unigram.html#empty/0","title":"Tokenizers.Model.Unigram.empty/0","type":"function"},{"doc":"Instantiate a Unigram model from the given vocab","ref":"Tokenizers.Model.Unigram.html#init/2","title":"Tokenizers.Model.Unigram.init/2","type":"function"},{"doc":"Options for model initialisation. All options can be ommited.\n\n* `:unk_id`- The unknown token id to be used by the model.","ref":"Tokenizers.Model.Unigram.html#t:options/0","title":"Tokenizers.Model.Unigram.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.WordLevel.html","title":"Tokenizers.Model.WordLevel","type":"module"},{"doc":"Instantiate an empty WordLevel model","ref":"Tokenizers.Model.WordLevel.html#empty/0","title":"Tokenizers.Model.WordLevel.empty/0","type":"function"},{"doc":"Instantiate a WordLevel model from the given vocab file","ref":"Tokenizers.Model.WordLevel.html#from_file/2","title":"Tokenizers.Model.WordLevel.from_file/2","type":"function"},{"doc":"Instantiate a WordLevel model from the given vocab","ref":"Tokenizers.Model.WordLevel.html#init/2","title":"Tokenizers.Model.WordLevel.init/2","type":"function"},{"doc":"Options for model initialisation. All options can be ommited.\n\n* `:unk_token` (default `\"[UNK]\"`) - The unknown token to be used by the model.","ref":"Tokenizers.Model.WordLevel.html#t:options/0","title":"Tokenizers.Model.WordLevel.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.WordPiece.html","title":"Tokenizers.Model.WordPiece","type":"module"},{"doc":"Instantiate an empty WordPiece model","ref":"Tokenizers.Model.WordPiece.html#empty/0","title":"Tokenizers.Model.WordPiece.empty/0","type":"function"},{"doc":"Instantiate a WordPiece model from the given vocab file","ref":"Tokenizers.Model.WordPiece.html#from_file/2","title":"Tokenizers.Model.WordPiece.from_file/2","type":"function"},{"doc":"Instantiate a WordPiece model from the given vocab","ref":"Tokenizers.Model.WordPiece.html#init/2","title":"Tokenizers.Model.WordPiece.init/2","type":"function"},{"doc":"Options for model initialisation. All options can be ommited.\n\n* `:unk_token` (default `\"[UNK]\"`) - The unknown token to be used by the model.\n* `:max_input_chars_per_word` (default `100`) - The maximum number of characters to authorize in a single word.\n* `:continuing_subword_prefix` (default `\"##\"`) - The prefix to attach to subword units that don't represent a beginning of word","ref":"Tokenizers.Model.WordPiece.html#t:options/0","title":"Tokenizers.Model.WordPiece.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Native.html","title":"Tokenizers.Native","type":"module"},{"doc":"","ref":"Tokenizers.Native.html#added_token_info/1","title":"Tokenizers.Native.added_token_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#added_token_new/2","title":"Tokenizers.Native.added_token_new/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_bpe/1","title":"Tokenizers.Native.decoders_bpe/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_byte_fallback/0","title":"Tokenizers.Native.decoders_byte_fallback/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_byte_level/0","title":"Tokenizers.Native.decoders_byte_level/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_ctc/1","title":"Tokenizers.Native.decoders_ctc/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_decode/2","title":"Tokenizers.Native.decoders_decode/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_fuse/0","title":"Tokenizers.Native.decoders_fuse/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_info/1","title":"Tokenizers.Native.decoders_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_metaspace/1","title":"Tokenizers.Native.decoders_metaspace/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_replace/2","title":"Tokenizers.Native.decoders_replace/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_sequence/1","title":"Tokenizers.Native.decoders_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_strip/3","title":"Tokenizers.Native.decoders_strip/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_wordpiece/1","title":"Tokenizers.Native.decoders_wordpiece/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_char_to_token/3","title":"Tokenizers.Native.encoding_char_to_token/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_char_to_word/3","title":"Tokenizers.Native.encoding_char_to_word/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_attention_mask/1","title":"Tokenizers.Native.encoding_get_attention_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_ids/1","title":"Tokenizers.Native.encoding_get_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_length/1","title":"Tokenizers.Native.encoding_get_length/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_n_sequences/1","title":"Tokenizers.Native.encoding_get_n_sequences/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_offsets/1","title":"Tokenizers.Native.encoding_get_offsets/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_overflowing/1","title":"Tokenizers.Native.encoding_get_overflowing/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_sequence_ids/1","title":"Tokenizers.Native.encoding_get_sequence_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_special_tokens_mask/1","title":"Tokenizers.Native.encoding_get_special_tokens_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_tokens/1","title":"Tokenizers.Native.encoding_get_tokens/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_type_ids/1","title":"Tokenizers.Native.encoding_get_type_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_u32_attention_mask/1","title":"Tokenizers.Native.encoding_get_u32_attention_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_u32_ids/1","title":"Tokenizers.Native.encoding_get_u32_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_u32_special_tokens_mask/1","title":"Tokenizers.Native.encoding_get_u32_special_tokens_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_u32_type_ids/1","title":"Tokenizers.Native.encoding_get_u32_type_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_get_word_ids/1","title":"Tokenizers.Native.encoding_get_word_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_pad/3","title":"Tokenizers.Native.encoding_pad/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_set_sequence_id/2","title":"Tokenizers.Native.encoding_set_sequence_id/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_token_to_chars/2","title":"Tokenizers.Native.encoding_token_to_chars/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_token_to_sequence/2","title":"Tokenizers.Native.encoding_token_to_sequence/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_token_to_word/2","title":"Tokenizers.Native.encoding_token_to_word/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_truncate/3","title":"Tokenizers.Native.encoding_truncate/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_word_to_chars/3","title":"Tokenizers.Native.encoding_word_to_chars/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encoding_word_to_tokens/3","title":"Tokenizers.Native.encoding_word_to_tokens/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_bpe_empty/0","title":"Tokenizers.Native.models_bpe_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_bpe_from_file/3","title":"Tokenizers.Native.models_bpe_from_file/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_bpe_init/3","title":"Tokenizers.Native.models_bpe_init/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_info/1","title":"Tokenizers.Native.models_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_save/3","title":"Tokenizers.Native.models_save/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_unigram_empty/0","title":"Tokenizers.Native.models_unigram_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_unigram_init/2","title":"Tokenizers.Native.models_unigram_init/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordlevel_empty/0","title":"Tokenizers.Native.models_wordlevel_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordlevel_from_file/2","title":"Tokenizers.Native.models_wordlevel_from_file/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordlevel_init/2","title":"Tokenizers.Native.models_wordlevel_init/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordpiece_empty/0","title":"Tokenizers.Native.models_wordpiece_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordpiece_from_file/2","title":"Tokenizers.Native.models_wordpiece_from_file/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordpiece_init/2","title":"Tokenizers.Native.models_wordpiece_init/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_bert_normalizer/1","title":"Tokenizers.Native.normalizers_bert_normalizer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_info/1","title":"Tokenizers.Native.normalizers_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_lowercase/0","title":"Tokenizers.Native.normalizers_lowercase/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfc/0","title":"Tokenizers.Native.normalizers_nfc/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfd/0","title":"Tokenizers.Native.normalizers_nfd/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfkc/0","title":"Tokenizers.Native.normalizers_nfkc/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfkd/0","title":"Tokenizers.Native.normalizers_nfkd/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nmt/0","title":"Tokenizers.Native.normalizers_nmt/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_normalize/2","title":"Tokenizers.Native.normalizers_normalize/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_precompiled/1","title":"Tokenizers.Native.normalizers_precompiled/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_prepend/1","title":"Tokenizers.Native.normalizers_prepend/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_replace/2","title":"Tokenizers.Native.normalizers_replace/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_sequence/1","title":"Tokenizers.Native.normalizers_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_strip/1","title":"Tokenizers.Native.normalizers_strip/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_strip_accents/0","title":"Tokenizers.Native.normalizers_strip_accents/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_bert/2","title":"Tokenizers.Native.post_processors_bert/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_byte_level/1","title":"Tokenizers.Native.post_processors_byte_level/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_info/1","title":"Tokenizers.Native.post_processors_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_roberta/3","title":"Tokenizers.Native.post_processors_roberta/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_sequence/1","title":"Tokenizers.Native.post_processors_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_template/1","title":"Tokenizers.Native.post_processors_template/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_bert/0","title":"Tokenizers.Native.pre_tokenizers_bert/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_byte_level/1","title":"Tokenizers.Native.pre_tokenizers_byte_level/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_byte_level_alphabet/0","title":"Tokenizers.Native.pre_tokenizers_byte_level_alphabet/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_char_delimiter_split/1","title":"Tokenizers.Native.pre_tokenizers_char_delimiter_split/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_digits/1","title":"Tokenizers.Native.pre_tokenizers_digits/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_info/1","title":"Tokenizers.Native.pre_tokenizers_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_metaspace/1","title":"Tokenizers.Native.pre_tokenizers_metaspace/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_pre_tokenize/2","title":"Tokenizers.Native.pre_tokenizers_pre_tokenize/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_punctuation/1","title":"Tokenizers.Native.pre_tokenizers_punctuation/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_sequence/1","title":"Tokenizers.Native.pre_tokenizers_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_split/3","title":"Tokenizers.Native.pre_tokenizers_split/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_whitespace/0","title":"Tokenizers.Native.pre_tokenizers_whitespace/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_whitespace_split/0","title":"Tokenizers.Native.pre_tokenizers_whitespace_split/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_add_special_tokens/2","title":"Tokenizers.Native.tokenizer_add_special_tokens/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_add_tokens/2","title":"Tokenizers.Native.tokenizer_add_tokens/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_decode/3","title":"Tokenizers.Native.tokenizer_decode/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_decode_batch/3","title":"Tokenizers.Native.tokenizer_decode_batch/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_disable_padding/1","title":"Tokenizers.Native.tokenizer_disable_padding/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_disable_truncation/1","title":"Tokenizers.Native.tokenizer_disable_truncation/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_encode/3","title":"Tokenizers.Native.tokenizer_encode/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_encode_batch/3","title":"Tokenizers.Native.tokenizer_encode_batch/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_from_buffer/2","title":"Tokenizers.Native.tokenizer_from_buffer/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_from_file/2","title":"Tokenizers.Native.tokenizer_from_file/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_decoder/1","title":"Tokenizers.Native.tokenizer_get_decoder/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_model/1","title":"Tokenizers.Native.tokenizer_get_model/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_normalizer/1","title":"Tokenizers.Native.tokenizer_get_normalizer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_post_processor/1","title":"Tokenizers.Native.tokenizer_get_post_processor/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_pre_tokenizer/1","title":"Tokenizers.Native.tokenizer_get_pre_tokenizer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_vocab/2","title":"Tokenizers.Native.tokenizer_get_vocab/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_get_vocab_size/2","title":"Tokenizers.Native.tokenizer_get_vocab_size/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_id_to_token/2","title":"Tokenizers.Native.tokenizer_id_to_token/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_init/1","title":"Tokenizers.Native.tokenizer_init/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_post_processing/4","title":"Tokenizers.Native.tokenizer_post_processing/4","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_save/3","title":"Tokenizers.Native.tokenizer_save/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_decoder/2","title":"Tokenizers.Native.tokenizer_set_decoder/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_model/2","title":"Tokenizers.Native.tokenizer_set_model/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_normalizer/2","title":"Tokenizers.Native.tokenizer_set_normalizer/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_padding/2","title":"Tokenizers.Native.tokenizer_set_padding/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_post_processor/2","title":"Tokenizers.Native.tokenizer_set_post_processor/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_pre_tokenizer/2","title":"Tokenizers.Native.tokenizer_set_pre_tokenizer/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_set_truncation/2","title":"Tokenizers.Native.tokenizer_set_truncation/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_token_to_id/2","title":"Tokenizers.Native.tokenizer_token_to_id/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#tokenizer_train_from_files/3","title":"Tokenizers.Native.tokenizer_train_from_files/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_bpe_trainer/1","title":"Tokenizers.Native.trainers_bpe_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_info/1","title":"Tokenizers.Native.trainers_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_train/2","title":"Tokenizers.Native.trainers_train/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_unigram_trainer/1","title":"Tokenizers.Native.trainers_unigram_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_wordlevel_trainer/1","title":"Tokenizers.Native.trainers_wordlevel_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_wordpiece_trainer/1","title":"Tokenizers.Native.trainers_wordpiece_trainer/1","type":"function"},{"doc":"A Normalizer is in charge of pre-processing the input string\nin order to normalize it as relevant for a given use case.\n\nSome common examples of normalization are the Unicode normalization algorithms\n(NFD, NFKD, NFC & NFKC), lowercasing etc...\nThe specificity of tokenizers is that we keep track of the alignment while normalizing.\nThis is essential to allow mapping from the generated tokens back to the input text.\n\nThe Normalizer is optional.","ref":"Tokenizers.Normalizer.html","title":"Tokenizers.Normalizer","type":"module"},{"doc":"Takes care of normalizing raw text before giving it to a Bert model. This includes cleaning the text, handling accents, chinese chars and lowercasing.","ref":"Tokenizers.Normalizer.html#bert_normalizer/1","title":"Tokenizers.Normalizer.bert_normalizer/1","type":"function"},{"doc":"Replaces all uppercase to lowercase","ref":"Tokenizers.Normalizer.html#lowercase/0","title":"Tokenizers.Normalizer.lowercase/0","type":"function"},{"doc":"NFC Unicode Normalizer","ref":"Tokenizers.Normalizer.html#nfc/0","title":"Tokenizers.Normalizer.nfc/0","type":"function"},{"doc":"NFD Unicode Normalizer,","ref":"Tokenizers.Normalizer.html#nfd/0","title":"Tokenizers.Normalizer.nfd/0","type":"function"},{"doc":"NFKC Unicode Normalizer","ref":"Tokenizers.Normalizer.html#nfkc/0","title":"Tokenizers.Normalizer.nfkc/0","type":"function"},{"doc":"NFKD Unicode Normalizer","ref":"Tokenizers.Normalizer.html#nfkd/0","title":"Tokenizers.Normalizer.nfkd/0","type":"function"},{"doc":"Nmt normalizer","ref":"Tokenizers.Normalizer.html#nmt/0","title":"Tokenizers.Normalizer.nmt/0","type":"function"},{"doc":"Normalizes the input presented as string into new string","ref":"Tokenizers.Normalizer.html#normalize/2","title":"Tokenizers.Normalizer.normalize/2","type":"function"},{"doc":"Precompiled normalizer. Don‚Äôt use manually it is used for compatiblity for SentencePiece.","ref":"Tokenizers.Normalizer.html#precompiled/1","title":"Tokenizers.Normalizer.precompiled/1","type":"function"},{"doc":"Prepend normalizer.","ref":"Tokenizers.Normalizer.html#prepend/1","title":"Tokenizers.Normalizer.prepend/1","type":"function"},{"doc":"Replaces a custom string or regexp and changes it with given content","ref":"Tokenizers.Normalizer.html#replace/2","title":"Tokenizers.Normalizer.replace/2","type":"function"},{"doc":"Composes multiple normalizers that will run in the provided order.","ref":"Tokenizers.Normalizer.html#sequence/1","title":"Tokenizers.Normalizer.sequence/1","type":"function"},{"doc":"Strip normalizer. Removes all whitespace characters on the specified sides (left, right or both) of the input","ref":"Tokenizers.Normalizer.html#strip/1","title":"Tokenizers.Normalizer.strip/1","type":"function"},{"doc":"Strip Accent normalizer. Removes all accent symbols in unicode (to be used with NFD for consistency).","ref":"Tokenizers.Normalizer.html#strip_accents/0","title":"Tokenizers.Normalizer.strip_accents/0","type":"function"},{"doc":"Options for BERT normalizer initialisation. All values are optional.\n\n* `:clean_text` (default `true`) - Whether to clean the text, by removing any control characters and replacing all whitespaces by the classic one.\n* `:handle_chinese_chars` (default `true`) - Whether to handle chinese chars by putting spaces around them.\n* `:strip_accents` - Whether to strip all accents. If this option is not specified, then it will be determined by the value for lowercase (as in the original Bert).\n* `:lowercase` (default `true`) - Whether to lowercase.","ref":"Tokenizers.Normalizer.html#t:bert_opts/0","title":"Tokenizers.Normalizer.bert_opts/0","type":"type"},{"doc":"Options for Strip normalizer initialisation. All values are optional.\n\n* `:left` (default `true`) - Whether to strip left side.\n* `:right` (default `true`) - Whether to strip right side.","ref":"Tokenizers.Normalizer.html#t:strip_opts/0","title":"Tokenizers.Normalizer.strip_opts/0","type":"type"},{"doc":"","ref":"Tokenizers.Normalizer.html#t:t/0","title":"Tokenizers.Normalizer.t/0","type":"type"},{"doc":"After the whole pipeline, we sometimes want to insert some special tokens\nbefore feed a tokenized string into a model like ‚Äù[CLS] My horse is amazing [SEP]‚Äù.\nThe PostProcessor is the component doing just that.","ref":"Tokenizers.PostProcessor.html","title":"Tokenizers.PostProcessor","type":"module"},{"doc":"Instantiate a new BertProcessing with the given tokens\n\nParams are tuple with the string representation of the token, and its id","ref":"Tokenizers.PostProcessor.html#bert/2","title":"Tokenizers.PostProcessor.bert/2","type":"function"},{"doc":"Creates ByteLevel post-processor.","ref":"Tokenizers.PostProcessor.html#byte_level/1","title":"Tokenizers.PostProcessor.byte_level/1","type":"function"},{"doc":"Creates Roberta post-processor.","ref":"Tokenizers.PostProcessor.html#roberta/3","title":"Tokenizers.PostProcessor.roberta/3","type":"function"},{"doc":"Instantiate a new Sequence post-processor","ref":"Tokenizers.PostProcessor.html#sequence/1","title":"Tokenizers.PostProcessor.sequence/1","type":"function"},{"doc":"Creates Template post-processor.\n\nLet‚Äôs you easily template the post processing, adding special tokens,\nand specifying the type_id for each sequence/special token.\nThe template is given two strings representing the single sequence and the pair of sequences,\nas well as a set of special tokens to use.\n\nExample, when specifying a template with these values:\n\n* single: `\"[CLS] $A [SEP]\"`\n* pair: `\"[CLS] $A [SEP] $B [SEP]\"`\n* special tokens:\n  * `\"[CLS]\"`\n  * `\"[SEP]\"`\n\n> Input: `(\"I like this\", \"but not this\")`\n> Output: `\"[CLS] I like this [SEP] but not this [SEP]\"`","ref":"Tokenizers.PostProcessor.html#template/1","title":"Tokenizers.PostProcessor.template/1","type":"function"},{"doc":"Options for ByteLevel post-processor. All values are optional.\n\n* `:trim_offsets` (default `true`) - Whether to trim the whitespaces in the produced offsets","ref":"Tokenizers.PostProcessor.html#t:byte_level_opts/0","title":"Tokenizers.PostProcessor.byte_level_opts/0","type":"type"},{"doc":"Options for Roberta post-processor. All values are optional.\n\n* `:trim_offest` (default `true`) - Whether to trim the whitespaces in the produced offsets\n* `:add_prefix_space` (default `true`) - Whether add_prefix_space was ON during the pre-tokenization.","ref":"Tokenizers.PostProcessor.html#t:roberta_opts/0","title":"Tokenizers.PostProcessor.roberta_opts/0","type":"type"},{"doc":"","ref":"Tokenizers.PostProcessor.html#t:t/0","title":"Tokenizers.PostProcessor.t/0","type":"type"},{"doc":"Options for Template post-processor.\n\n* `:single` - A string describing the template for a single sequence.\n* `:pair` - A string describing the template for a pair of sequences.\n* `:special_tokens` - A list of special tokens to use in the template.","ref":"Tokenizers.PostProcessor.html#t:template_opts/0","title":"Tokenizers.PostProcessor.template_opts/0","type":"type"},{"doc":"The `PreTokenizer` takes care of splitting the input according to a set of rules.\nThis pre-processing lets you ensure that the underlying `Model`\ndoes not build tokens across multiple ‚Äúsplits‚Äù.\nFor example if you don‚Äôt want to have whitespaces inside a token,\nthen you can have a `PreTokenizer` that splits on these whitespaces.\n\nYou can easily combine multiple `PreTokenizer` together using a `Sequence` (see below).\nThe `PreTokenizer` is also allowed to modify the string, just like a `Normalizer` does.\nThis is necessary to allow some complicated algorithms\nthat require to split before normalizing (e.g. the ByteLevel)","ref":"Tokenizers.PreTokenizer.html","title":"Tokenizers.PreTokenizer","type":"module"},{"doc":"Creates BertPreTokenizer pre-tokenizer.\n\nSplits for use in Bert models.","ref":"Tokenizers.PreTokenizer.html#bert_pre_tokenizer/0","title":"Tokenizers.PreTokenizer.bert_pre_tokenizer/0","type":"function"},{"doc":"Creates ByteLevel PreTokenizer.\n\nSplits on whitespaces while remapping all the bytes to a set of visible characters.\nThis technique as been introduced by OpenAI with GPT-2 and has some more or less nice properties:\n\n* Since it maps on bytes, a tokenizer using this only requires 256 characters\n  as initial alphabet (the number of values a byte can have),\n  as opposed to the 130,000+ Unicode characters.\n* A consequence of the previous point is that it is absolutely unnecessary\n  to have an unknown token using this since we can represent anything\n  with 256 tokens (Youhou!! üéâüéâ)\n* For non ascii characters, it gets completely unreadable, but it works nonetheless!","ref":"Tokenizers.PreTokenizer.html#byte_level/1","title":"Tokenizers.PreTokenizer.byte_level/1","type":"function"},{"doc":"Gets ByteLevel pre-tokenizer's alphabet.","ref":"Tokenizers.PreTokenizer.html#byte_level_alphabet/0","title":"Tokenizers.PreTokenizer.byte_level_alphabet/0","type":"function"},{"doc":"Creates CharDelimiterSplit pre-tokenizer.\n\nThis pre-tokenizer simply splits on the provided delimiter. Works almost like the `.split(delimiter)`\nfunction, except that it accounts for multiple consecutive spaces","ref":"Tokenizers.PreTokenizer.html#char_delimiter_split/1","title":"Tokenizers.PreTokenizer.char_delimiter_split/1","type":"function"},{"doc":"Creates Digits pre-tokenizer.\n\nSplits the numbers from any other characters.","ref":"Tokenizers.PreTokenizer.html#digits/1","title":"Tokenizers.PreTokenizer.digits/1","type":"function"},{"doc":"Creates Metaspace pre-tokenizer.\n\nSplits on whitespaces and replaces them with a special char ‚Äú‚ñÅ‚Äù (U+2581)","ref":"Tokenizers.PreTokenizer.html#metaspace/1","title":"Tokenizers.PreTokenizer.metaspace/1","type":"function"},{"doc":"Converts a string into a sequence of pre-tokens.","ref":"Tokenizers.PreTokenizer.html#pre_tokenize/2","title":"Tokenizers.PreTokenizer.pre_tokenize/2","type":"function"},{"doc":"Creates Punctuation pre-tokenizer.\n\nWill isolate all punctuation characters.","ref":"Tokenizers.PreTokenizer.html#punctuation/1","title":"Tokenizers.PreTokenizer.punctuation/1","type":"function"},{"doc":"Creates Sequence pre-tokenizer.\n\nLets you compose multiple `PreTokenizer` that will be run in the given order","ref":"Tokenizers.PreTokenizer.html#sequence/1","title":"Tokenizers.PreTokenizer.sequence/1","type":"function"},{"doc":"Creates Split pre-tokenizer.\n\nVersatile pre-tokenizer that splits on provided pattern and according to provided behavior.\nThe pattern can be inverted if necessary.\n\n* pattern should be either a custom string or regexp.\n* behavior should be one of:\n\n  * `:removed`\n  * `:isolated`\n  * `:merged_with_previous`\n  * `:merged_with_next`\n  * `:contiguous`","ref":"Tokenizers.PreTokenizer.html#split/3","title":"Tokenizers.PreTokenizer.split/3","type":"function"},{"doc":"Creates Whitespace pre-tokenizer.\n\nSplits on word boundaries (using the following regular expression: `w+|[^w ]+`","ref":"Tokenizers.PreTokenizer.html#whitespace/0","title":"Tokenizers.PreTokenizer.whitespace/0","type":"function"},{"doc":"Creates WhitespaceSplit pre-tokenizer.\n\nSplits on any whitespace character","ref":"Tokenizers.PreTokenizer.html#whitespace_split/0","title":"Tokenizers.PreTokenizer.whitespace_split/0","type":"function"},{"doc":"Options for ByteLevel pre-tokenizer. All values are optional.\n\n* `:add_prefix_space` (default `true`) - Whether to add a space to the first word if there isn‚Äôt already one. This lets us treat hello exactly like say hello.\n* `:use_regex` (default `true`) - Set this to False to prevent this pre_tokenizer from using the GPT2 specific regexp for spliting on whitespace.","ref":"Tokenizers.PreTokenizer.html#t:byte_level_opts/0","title":"Tokenizers.PreTokenizer.byte_level_opts/0","type":"type"},{"doc":"Options for Digits pre-tokenizer. All values are optional.\n\n* `:individual_digits` (default `false`) - Whether to split individual digits or not.","ref":"Tokenizers.PreTokenizer.html#t:digits_opts/0","title":"Tokenizers.PreTokenizer.digits_opts/0","type":"type"},{"doc":"Options for Metaspace pre-tokenizer. All values are optional.\n\n* `:replacement` (default `\"‚ñÅ\"`) - The replacement character to use.\n* `:add_prefix_space` (default `true`) - Whether to add a space to the first word if there isn‚Äôt already one. This lets us treat hello exactly like say hello.","ref":"Tokenizers.PreTokenizer.html#t:metaspace_opts/0","title":"Tokenizers.PreTokenizer.metaspace_opts/0","type":"type"},{"doc":"Options for Split pre-tokenizer. All values are optional.\n\n* `:invert` (default `false`) - Whether to invert the split or not.","ref":"Tokenizers.PreTokenizer.html#t:spit_opts/0","title":"Tokenizers.PreTokenizer.spit_opts/0","type":"type"},{"doc":"Specifies how delimiter should behave for several pretokenizers.","ref":"Tokenizers.PreTokenizer.html#t:split_delimiter_behaviour/0","title":"Tokenizers.PreTokenizer.split_delimiter_behaviour/0","type":"type"},{"doc":"","ref":"Tokenizers.PreTokenizer.html#t:t/0","title":"Tokenizers.PreTokenizer.t/0","type":"type"},{"doc":"The struct and associated functions for a tokenizer.\n\nA `Tokenizers.t()` is a container that holds the constituent parts of the tokenization pipeline.\n\nWhen you call `Tokenizers.Tokenizer.encode/3`, the input text goes through the following pipeline:\n\n- normalization\n- pre-tokenization\n- model\n- post-processing\n\nThis returns a `Tokenizers.Encoding.t()`, which can then give you the token ids for each token in the input text.\nThese token ids are usually used as the input for natural language processing machine learning models.","ref":"Tokenizers.Tokenizer.html","title":"Tokenizers.Tokenizer","type":"module"},{"doc":"Adds special tokens to the vocabulary.\nThese tokens **are special**. To add regular tokens - use `add_tokens/2`.","ref":"Tokenizers.Tokenizer.html#add_special_tokens/2","title":"Tokenizers.Tokenizer.add_special_tokens/2","type":"function"},{"doc":"Adds tokens to the vocabulary.\nThese tokens **are not special**. To add special tokens - use `add_special_tokens/2`.","ref":"Tokenizers.Tokenizer.html#add_tokens/2","title":"Tokenizers.Tokenizer.add_tokens/2","type":"function"},{"doc":"Decodes the given list of ids back to a string.\n\nOptions:\n\n* `:skip_special_tokens` (default: `true`) - whether to remove special tokens from the decoded string.","ref":"Tokenizers.Tokenizer.html#decode/3","title":"Tokenizers.Tokenizer.decode/3","type":"function"},{"doc":"Decode the given list of ids or list of lists of ids back to strings.","ref":"Tokenizers.Tokenizer.html#decode_batch/3","title":"Tokenizers.Tokenizer.decode_batch/3","type":"function"},{"doc":"Disable padding for the tokenizer.","ref":"Tokenizers.Tokenizer.html#disable_padding/1","title":"Tokenizers.Tokenizer.disable_padding/1","type":"function"},{"doc":"Disable truncation for the tokenizer.","ref":"Tokenizers.Tokenizer.html#disable_truncation/1","title":"Tokenizers.Tokenizer.disable_truncation/1","type":"function"},{"doc":"Encode the given sequence to a `Tokenizers.Encoding.t()`.\n\nOptions:\n* `:add_special_tokens` (default: `true`) - whether to add special tokens to the sequence.","ref":"Tokenizers.Tokenizer.html#encode/3","title":"Tokenizers.Tokenizer.encode/3","type":"function"},{"doc":"Encode the given batch of sequences to a `Tokenizers.Encoding.t()`.\n\nFor options check `encode/3`.","ref":"Tokenizers.Tokenizer.html#encode_batch/3","title":"Tokenizers.Tokenizer.encode_batch/3","type":"function"},{"doc":"Instantiate a new tokenizer from the buffer.","ref":"Tokenizers.Tokenizer.html#from_buffer/2","title":"Tokenizers.Tokenizer.from_buffer/2","type":"function"},{"doc":"Instantiate a new tokenizer from the file at the given path.","ref":"Tokenizers.Tokenizer.html#from_file/2","title":"Tokenizers.Tokenizer.from_file/2","type":"function"},{"doc":"Instantiate a new tokenizer from an existing file on the Hugging Face Hub.\n\nThis is going to download a tokenizer file, save it to disk and load that file.","ref":"Tokenizers.Tokenizer.html#from_pretrained/2","title":"Tokenizers.Tokenizer.from_pretrained/2","type":"function"},{"doc":"* `:http_client` - A tuple with a module and options. This module should implement\n    the `request/1` function, accepting a keyword list with the options for a request.\n    This is inspired by `Req.request/1`: https://hexdocs.pm/req/Req.html#request/1\n\n    The default HTTP client config is: `{Tokenizers.HTTPClient, []}`.\n    Since it's inspired by `Req`, it's possible to use that client without any adjustments.\n\n    When making request, the options `:url` and `:method` are going to be overridden.\n    `:headers` contains the \"user-agent\" set by default.\n\n  * `:revision` - The revision name that should be used for fetching the tokenizers\n    from Hugging Face.\n\n  * `:use_cache` - Tells if it should read from cache when the file already exists.\n    Defaults to `true`.\n\n  * `:cache_dir` - The directory where cache is saved. Files are written to cache\n    even if `:use_cache` is false. By default it uses `:filename.basedir/3` to get\n    a cache dir based in the \"tokenizers_elixir\" application name.\n\n  * `:additional_special_tokens` - A list of special tokens to append to the tokenizer.\n    Defaults to `[]`.\n\n  * `:padding` - Override for padding configuration. Currently the only supported\n    value is `:none` to disable padding. By default the configuration is restored\n    from the file.\n\n  * `:truncation` - Override for truncation configuration. Currently the only supported\n    value is `:none` to disable truncation. By default the configuration is restored\n    from the file.","ref":"Tokenizers.Tokenizer.html#from_pretrained/2-options","title":"Options - Tokenizers.Tokenizer.from_pretrained/2","type":"function"},{"doc":"Get the `Tokenizer`'s `Decoder`.","ref":"Tokenizers.Tokenizer.html#get_decoder/1","title":"Tokenizers.Tokenizer.get_decoder/1","type":"function"},{"doc":"Get the `Tokenizer`'s `Model`.","ref":"Tokenizers.Tokenizer.html#get_model/1","title":"Tokenizers.Tokenizer.get_model/1","type":"function"},{"doc":"Get the `Tokenizer`'s `Normalizer`.","ref":"Tokenizers.Tokenizer.html#get_normalizer/1","title":"Tokenizers.Tokenizer.get_normalizer/1","type":"function"},{"doc":"Get the `Tokenizer`'s `PostProcessor`.","ref":"Tokenizers.Tokenizer.html#get_post_processor/1","title":"Tokenizers.Tokenizer.get_post_processor/1","type":"function"},{"doc":"Get the `Tokenizer`'s `PreTokenizer`.","ref":"Tokenizers.Tokenizer.html#get_pre_tokenizer/1","title":"Tokenizers.Tokenizer.get_pre_tokenizer/1","type":"function"},{"doc":"Get the tokenizer's vocabulary as a map of token to id.","ref":"Tokenizers.Tokenizer.html#get_vocab/2","title":"Tokenizers.Tokenizer.get_vocab/2","type":"function"},{"doc":"Get the number of tokens in the vocabulary.","ref":"Tokenizers.Tokenizer.html#get_vocab_size/2","title":"Tokenizers.Tokenizer.get_vocab_size/2","type":"function"},{"doc":"Convert a given id to its token.","ref":"Tokenizers.Tokenizer.html#id_to_token/2","title":"Tokenizers.Tokenizer.id_to_token/2","type":"function"},{"doc":"Instantiate a new tokenizer from an existing models.","ref":"Tokenizers.Tokenizer.html#init/1","title":"Tokenizers.Tokenizer.init/1","type":"function"},{"doc":"Save the tokenizer to the provided path. Options:\n\n* `:pretty` - Whether to pretty print the JSON file. Defaults to `true`.","ref":"Tokenizers.Tokenizer.html#save/3","title":"Tokenizers.Tokenizer.save/3","type":"function"},{"doc":"Set the `Tokenizer`'s `Decoder`.","ref":"Tokenizers.Tokenizer.html#set_decoder/2","title":"Tokenizers.Tokenizer.set_decoder/2","type":"function"},{"doc":"Set the `Tokenizer`'s `Model`.","ref":"Tokenizers.Tokenizer.html#set_model/2","title":"Tokenizers.Tokenizer.set_model/2","type":"function"},{"doc":"Set the `Tokenizer`'s `Normalizer`.","ref":"Tokenizers.Tokenizer.html#set_normalizer/2","title":"Tokenizers.Tokenizer.set_normalizer/2","type":"function"},{"doc":"Set padding for the tokenizer.","ref":"Tokenizers.Tokenizer.html#set_padding/2","title":"Tokenizers.Tokenizer.set_padding/2","type":"function"},{"doc":"Set the `Tokenizer`'s `PostProcessor`.","ref":"Tokenizers.Tokenizer.html#set_post_processor/2","title":"Tokenizers.Tokenizer.set_post_processor/2","type":"function"},{"doc":"Set the `Tokenizer`'s `PreTokenizer`.","ref":"Tokenizers.Tokenizer.html#set_pre_tokenizer/2","title":"Tokenizers.Tokenizer.set_pre_tokenizer/2","type":"function"},{"doc":"Set truncation for the tokenizer.","ref":"Tokenizers.Tokenizer.html#set_truncation/2","title":"Tokenizers.Tokenizer.set_truncation/2","type":"function"},{"doc":"Convert a given token to its id.","ref":"Tokenizers.Tokenizer.html#token_to_id/2","title":"Tokenizers.Tokenizer.token_to_id/2","type":"function"},{"doc":"Train the tokenizer on the given files.","ref":"Tokenizers.Tokenizer.html#train_from_files/3","title":"Tokenizers.Tokenizer.train_from_files/3","type":"function"},{"doc":"An input being a subject to tokenization.\n\nCan be either a single sequence, or a pair of sequences.","ref":"Tokenizers.Tokenizer.html#t:encode_input/0","title":"Tokenizers.Tokenizer.encode_input/0","type":"type"},{"doc":"Options to set on the loaded tokenizer.\n\n  * `:additional_special_tokens - a list of special tokens to append to the tokenizer.\n    Defaults to `[]`.\n\n  * `:padding` - Override for padding configuration. Currently the only supported\n    value is `:none` to disable padding. By default the configuration is restored\n    from the file.\n\n  * `:truncation` - Override for truncation configuration. Currently the only supported\n    value is `:none` to disable truncation. By default the configuration is restored\n    from the file.","ref":"Tokenizers.Tokenizer.html#t:load_options/0","title":"Tokenizers.Tokenizer.load_options/0","type":"type"},{"doc":"Padding options. All options can be ommited.\n\n* `:strategy` (default: `:batch_longest`) - the strategy to use when padding.\n* `:direction` (default: `:right`) - the direction to use when padding.\n* `:pad_to_multiple_of` (default: `0`) - the multiple to pad to.\n* `:pad_id` (default: `0`) - the id of the token to use for padding.\n* `:pad_type_id` (default: `0`) - the id of the token type to use for padding.\n* `:pad_token` (default: `\" \"`) - the token to use for padding.","ref":"Tokenizers.Tokenizer.html#t:padding_options/0","title":"Tokenizers.Tokenizer.padding_options/0","type":"type"},{"doc":"","ref":"Tokenizers.Tokenizer.html#t:t/0","title":"Tokenizers.Tokenizer.t/0","type":"type"},{"doc":"Truncation options. All options can be ommited.\n\n* `:max_length` (default: `512`) - the maximum length to truncate the model's input to.\n* `:stride` (default: `0`) - the stride to use when overflowing the model's input.\n* `:strategy` (default: `:longest_first) - the strategy to use when overflowing the model's input.\n* `:direction` (default: `:right`) - the direction to use when overflowing the model's input.","ref":"Tokenizers.Tokenizer.html#t:truncation_options/0","title":"Tokenizers.Tokenizer.truncation_options/0","type":"type"},{"doc":"A Trainer has the responsibility to train a model.\nWe feed it with lines/sentences and then it can train the given Model.","ref":"Tokenizers.Trainer.html","title":"Tokenizers.Trainer","type":"module"},{"doc":"Creates a new BPE Trainer.","ref":"Tokenizers.Trainer.html#bpe/1","title":"Tokenizers.Trainer.bpe/1","type":"function"},{"doc":"Get trainer info","ref":"Tokenizers.Trainer.html#info/1","title":"Tokenizers.Trainer.info/1","type":"function"},{"doc":"The actual training method.\nThis will mutate a Model as well as return a list of special_tokens to be added directly to the tokenizer along with the model.","ref":"Tokenizers.Trainer.html#train/2","title":"Tokenizers.Trainer.train/2","type":"function"},{"doc":"Creates a new Unigram Trainer.","ref":"Tokenizers.Trainer.html#unigram/1","title":"Tokenizers.Trainer.unigram/1","type":"function"},{"doc":"Creates a new WordLevel Trainer.","ref":"Tokenizers.Trainer.html#wordlevel/1","title":"Tokenizers.Trainer.wordlevel/1","type":"function"},{"doc":"Creates a new WordPiece Trainer.","ref":"Tokenizers.Trainer.html#wordpiece/1","title":"Tokenizers.Trainer.wordpiece/1","type":"function"},{"doc":"Options for BPE trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:bpe_options/0","title":"Tokenizers.Trainer.bpe_options/0","type":"type"},{"doc":"","ref":"Tokenizers.Trainer.html#t:t/0","title":"Tokenizers.Trainer.t/0","type":"type"},{"doc":"Options for Unigram trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:unigram_options/0","title":"Tokenizers.Trainer.unigram_options/0","type":"type"},{"doc":"Options for WordLevel trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:wordlevel_options/0","title":"Tokenizers.Trainer.wordlevel_options/0","type":"type"},{"doc":"Options for WordPiece trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:wordpiece_options/0","title":"Tokenizers.Trainer.wordpiece_options/0","type":"type"},{"doc":"Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"# Quicktour\n\n```elixir\nMix.install([\n  {:tokenizers, \"~> 0.13\"},\n  {:req, \"~> 0.3.8\"}\n])\n```","ref":"quicktour.html","title":"Quicktour","type":"extras"},{"doc":"Let‚Äôs have a quick look at the ü§ó Tokenizers library features. The library provides an implementation of today‚Äôs most used tokenizers that is both easy to use and blazing fast.","ref":"quicktour.html#intro","title":"Intro - Quicktour","type":"extras"},{"doc":"To illustrate how fast the ü§ó Tokenizers library is, let‚Äôs train a new tokenizer on wikitext-103 (516M of text) in just a few seconds. First things first, you will need to download this dataset and unzip it with:\n\n```bash\nwget https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-raw-v1.zip\nunzip wikitext-103-raw-v1.zip\n```\n\n```elixir\nReq.get!(\"https://s3.amazonaws.com/research.metamind.io/wikitext/wikitext-103-raw-v1.zip\").body\n|> Enum.each(fn {filename, data} ->\n  filename = to_string(filename)\n  path = Path.join(__DIR__, filename)\n  IO.puts(\"Writing #{filename} to path #{path}\")\n\n  :ok = File.mkdir_p!(Path.dirname(path))\n  File.write!(path, data, [:write])\nend)\n```","ref":"quicktour.html#downloading-the-data","title":"Downloading the data - Quicktour","type":"extras"},{"doc":"#","ref":"quicktour.html#build-a-tokenizer-from-scratch","title":"Build a tokenizer from scratch - Quicktour","type":"extras"},{"doc":"```elixir\nalias Tokenizers.Tokenizer\nalias Tokenizers.Trainer\nalias Tokenizers.PostProcessor\nalias Tokenizers.PreTokenizer\nalias Tokenizers.Model\nalias Tokenizers.Encoding\n```\n\nIn this tour, we will build and train a Byte-Pair Encoding (BPE) tokenizer. For more information about the different type of tokenizers, check out this guide in the ü§ó Transformers documentation. Here, training the tokenizer means it will learn merge rules by:\n\n* Start with all the characters present in the training corpus as tokens.\n* Identify the most common pair of tokens and merge it into one token.\n* Repeat until the vocabulary (e.g., the number of tokens) has reached the size we want.\n\nThe main API of the library is the class Tokenizer, here is how we instantiate one with a BPE model:\n\n```elixir\n{:ok, model} = Model.BPE.init(%{}, [], unk_token: \"[UNK]\")\n{:ok, tokenizer} = Tokenizer.init(model)\n```\n\nTo train our tokenizer on the wikitext files, we will need to instantiate a **trainer**, in this case a `BpeTrainer`\n\n```elixir\n{:ok, trainer} = Trainer.bpe(special_tokens: [\"[UNK]\", \"[CLS]\", \"[SEP]\", \"[PAD]\", \"[MASK]\"])\n```\n\nWe can set the training arguments like `vocab_size` or `min_frequency` (here left at their default values of `30,000` and `0`) but the most important part is to give the `special_tokens` we plan to use later on (they are not used at all during training) so that they get inserted in the vocabulary.\n\n> The order in which you write the special tokens list matters: here `\"[UNK]\"` will get the ID `0`, `\"[CLS]\"` will get the ID `1` and so forth.\n\nWe could train our tokenizer right now, but it wouldn't be optimal. Without a pre-tokenizer that will split our inputs into words, we might get tokens that overlap several words: for instance we could get an \"it is\" token since those two words often appear next to each other. Using a pre-tokenizer will ensure no token is bigger than a word returned by the pre-tokenizer. Here we want to train a subword BPE tokenizer, and we will use the easiest pre-tokenizer possible by splitting on whitespace.\n\n```elixir\ntokenizer\n|> Tokenizer.set_pre_tokenizer(PreTokenizer.whitespace())\n```\n\nNow, we can just call the `Tokenizer.train` method with any list of files we want to use:\n\n```elixir\n[\n  \"wikitext-103-raw/wiki.test.raw\",\n  \"wikitext-103-raw/wiki.train.raw\",\n  \"wikitext-103-raw/wiki.valid.raw\"\n]\n|> Enum.map(&Path.join(__DIR__, &1))\n|> then(&Tokenizer.train_from_files(tokenizer, &1, trainer))\n```\n\nThis should only take a few seconds to train our tokenizer on the full wikitext dataset! To save the tokenizer in one file that contains all its configuration and vocabulary, just use the Tokenizer.save method:\n\n```elixir\nTokenizer.save(tokenizer, Path.join(__DIR__, \"tokenizer-wiki.json\"))\n```\n\nand you can reload your tokenizer from that file with the `Tokenizer.from_file` classmethod:\n\n```elixir\n{:ok, tokenizer} = Tokenizer.from_file(Path.join(__DIR__, \"tokenizer-wiki.json\"))\n```\n\n#","ref":"quicktour.html#training-the-tokenizer","title":"Training the tokenizer - Quicktour","type":"extras"},{"doc":"Now that we have trained a tokenizer, we can use it on any text we want with the `Tokenizer.encode` method:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, \"Hello, y'all! How are you üòÅ ?\")\n```\n\nThis applied the full pipeline of the tokenizer on the text, returning an Encoding object. To learn more about this pipeline, and how to apply (or customize) parts of it, check out this page.\n\nThis Encoding object then has all the attributes you need for your deep learning model (or other). The tokens attribute contains the segmentation of your text in tokens:\n\n```elixir\nEncoding.get_tokens(encoding)\n```\n\nSimilarly, the ids attribute will contain the index of each of those tokens in the tokenizer‚Äôs vocabulary:\n\n```elixir\nEncoding.get_ids(encoding)\n```\n\nAn important feature of the ü§ó Tokenizers library is that it comes with full alignment tracking, meaning you can always get the part of your original sentence that corresponds to a given token. Those are stored in the offsets attribute of our Encoding object. For instance, let‚Äôs assume we would want to find back what caused the \"[UNK]\" token to appear, which is the token at index 9 in the list, we can just ask for the offset at the index:\n\n```elixir\n{emoji_offset_start, emoji_offset_end} = Encoding.get_offsets(encoding) |> Enum.at(9)\n```\n\nand those are the indices that correspond to the emoji in the original sentence:\n\n```elixir\n\"Hello, y'all! How are you üòÅ ?\"\n|> :binary.part(\n  emoji_offset_start,\n  # Length\n  emoji_offset_end - emoji_offset_start\n)\n```\n\n#","ref":"quicktour.html#using-the-tokenizer","title":"Using the tokenizer - Quicktour","type":"extras"},{"doc":"We might want our tokenizer to automatically add special tokens, like `[CLS]` or `[SEP]`. To do this, we use a post-processor. TemplateProcessing is the most commonly used, you just have to specify a template for the processing of single sentences and pairs of sentences, along with the special tokens and their IDs.\n\nWhen we built our tokenizer, we set `[CLS]` and `[SEP]` in positions 1 and 2 of our list of special tokens, so this should be their IDs. To double-check, we can use the `Tokenizer.token_to_id` method:\n\n```elixir\nTokenizer.token_to_id(tokenizer, \"[SEP]\")\n```\n\nHere is how we can set the post-processing to give us the traditional BERT inputs:\n\n```elixir\ntokenizer\n|> Tokenizer.set_post_processor(\n  PostProcessor.template(\n    single: \"[CLS] $A [SEP]\",\n    pair: \"[CLS] $A [SEP] $B:1 [SEP]:1\",\n    special_tokens: [\n      {\"[CLS]\", Tokenizer.token_to_id(tokenizer, \"[CLS]\")},\n      {\"[SEP]\", Tokenizer.token_to_id(tokenizer, \"[SEP]\")}\n    ]\n  )\n)\n```\n\nLet's go over this snippet of code in more details. First we specify the template for single sentences: those should have the form `\"[CLS] $A [SEP]\"` where `$A` represents our sentence.\n\nThen, we specify the template for sentence pairs, which should have the form `\"[CLS] $A [SEP] $B [SEP]\"` where `$A` represents the first sentence and `$B` the second one. The `:1` added in the template represent the type IDs we want for each part of our input: it defaults to `0` for everything (which is why we don't have `$A:0`) and here we set it to 1 for the tokens of the second sentence and the last `\"[SEP]\"` token.\n\nLastly, we specify the special tokens we used and their IDs in our tokenizer's vocabulary.\n\nTo check out this worked properly, let's try to encode the same sentence as before:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, \"Hello, y'all! How are you üòÅ ?\")\nEncoding.get_tokens(encoding)\n```\n\nTo check the results on a pair of sentences, we just pass the two sentences to `Tokenizer.encode`:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, {\"Hello, y'all!\", \"How are you üòÅ ?\"})\nEncoding.get_tokens(encoding)\n```\n\nYou can then check the type IDs attributed to each token is correct with\n\n```elixir\nEncoding.get_type_ids(encoding)\n```\n\nIf you save your tokenizer with Tokenizer.save, the post-processor will be saved along.\n\n \n\n#","ref":"quicktour.html#post-processing","title":"Post-processing - Quicktour","type":"extras"},{"doc":"To get the full speed of the ü§ó Tokenizers library, it's best to process your texts by batches by using the Tokenizer.encode_batch method:\n\n```elixir\n{:ok, encoding} = Tokenizer.encode_batch(tokenizer, [\"Hello, y'all!\", \"How are you üòÅ ?\"])\n```\n\nThe output is then a list of Encoding objects like the ones we saw before. You can process together as many texts as you like, as long as it fits in memory.\n\nTo process a batch of sentences pairs, pass two lists to the Tokenizer.encode_batch method: the list of sentences A and the list of sentences B:\n\n```elixir\n{:ok, encoding} =\n  Tokenizer.encode_batch(tokenizer, [\n    {\"Hello, y'all!\", \"How are you üòÅ ?\"},\n    {\n      \"Hello to you too!\",\n      \"I'm fine, thank you!\"\n    }\n  ])\n```\n\nWhen encoding multiple sentences, you can automatically pad the outputs to the longest sentence present by using `Tokenizer.enable_padding`, with the `pad_token` and its ID (which we can double-check the id for the padding token with `Tokenizer.token_to_id` like before):\n\n```elixir\nTokenizer.set_padding(tokenizer, pad_id: 3, pad_token: \"[PAD]\")\n```\n\nWe can set the direction of the padding (defaults to the right) or a given length if we want to pad every sample to that specific number (here we leave it unset to pad to the size of the longest text).\n\n```elixir\n{:ok, encoding} = Tokenizer.encode_batch(tokenizer, [\"Hello, y'all!\", \"How are you üòÅ ?\"])\n\nencoding\n|> Enum.at(1)\n|> Encoding.get_tokens()\n```\n\nIn this case, the `attention mask` generated by the tokenizer takes the padding into account:\n\n```elixir\nencoding\n|> Enum.at(1)\n|> Encoding.get_attention_mask()\n```","ref":"quicktour.html#encoding-multiple-sentences-in-a-batch","title":"Encoding multiple sentences in a batch - Quicktour","type":"extras"},{"doc":"# Pretrained Tokenizers\n\n```elixir\nMix.install(\n  [\n    {:kino, \"~> 0.5.2\"},\n    {:scidata, \"~> 0.1.5\"},\n    {:tokenizers, \"~> 0.13\"},\n    {:nx, \"~> 0.3\"}\n  ],\n  force: true\n)\n```","ref":"pretrained.html","title":"Pretrained Tokenizers","type":"extras"},{"doc":"This Livebook will demonstrate how to use `Tokenizers` with pretrained tokenizers available on the [Hugging Face Hub](https://huggingface.co/models).\n\nWe'll install `Kino` for user input and `SciData` for real data to tokenize.\n\nCheck **_Notebook dependencies and setup_** section at the beginning of this notebook\n\n \n\nWe'll alias modules in `Tokenizers` for readability. For now, the two main entry points into `Tokenizers` are the `Tokenizer` and `Encoding` modules.\n\n```elixir\nalias Tokenizers.Tokenizer\nalias Tokenizers.Encoding\n```","ref":"pretrained.html#setup","title":"Setup - Pretrained Tokenizers","type":"extras"},{"doc":"The first thing to do is get a tokenizer from the hub. I've chosen `bert-base-cased` here as it's commonly used in Hugging Face examples. This call will download the tokenizer from the hub and load it into memory.\n\n```elixir\n{:ok, tokenizer} = Tokenizer.from_pretrained(\"bert-base-cased\")\n```","ref":"pretrained.html#get-a-tokenizer","title":"Get a tokenizer - Pretrained Tokenizers","type":"extras"},{"doc":"You can save and load models. That means you can load in tokenizers you may have trained locally!\n\nYou can choose the path with the Kino input below.\n\n```elixir\ninput = Kino.Input.text(\"Path\")\n```\n\n```elixir\npath = Kino.Input.read(input)\nTokenizer.save(tokenizer, path)\n```\n\n```elixir\n{:ok, tokenizer} = Tokenizer.from_file(path)\n```","ref":"pretrained.html#save-and-load","title":"Save and load - Pretrained Tokenizers","type":"extras"},{"doc":"Let's see what we can do with the tokenizer. First, let's have a look at the vocab. It's represented as a map of tokens to ids.\n\n```elixir\nvocab = Tokenizer.get_vocab(tokenizer)\n```\n\nWe can access an id using the vocab, but we don't need to extract the vocab. `Tokenizer.token_to_id/2` does the job for us.\n\n```elixir\nvocab[\"Jaguar\"]\n```\n\n```elixir\nTokenizer.token_to_id(tokenizer, \"Jaguar\")\n```\n\nAnd if we want to go back the other way...\n\n```elixir\nTokenizer.id_to_token(tokenizer, 21694)\n```\n\nWe can also see the vocab size.\n\n```elixir\nTokenizer.get_vocab_size(tokenizer)\n```","ref":"pretrained.html#check-the-tokenizer","title":"Check the tokenizer - Pretrained Tokenizers","type":"extras"},{"doc":"When you tokenize some text you get an encoding. This is represented as `Tokenizers.Encoding.t()`. Because `Tokenizers` relies on Rust bindings, the encoding itself appears opaque.\n\n```elixir\n{:ok, encoding} = Tokenizer.encode(tokenizer, \"Hello there!\")\n```\n\nHowever, we can get the ids for the encoding as an Elixir list.\n\n```elixir\nids = Encoding.get_ids(encoding)\n```\n\nAnd we can decode those back into tokens.\n\n```elixir\nTokenizer.decode(tokenizer, ids)\n```\n\nPassing a batch of text as a list of strings returns a batch of encodings.\n\n```elixir\n{:ok, encodings} = Tokenizer.encode_batch(tokenizer, [\"Hello there!\", \"This is a test.\"])\n```\n\nAnd we can see the list of ids and decode them again.\n\n```elixir\nlist_of_ids = Enum.map(encodings, &Encoding.get_ids/1)\n```\n\n```elixir\nTokenizer.decode_batch(tokenizer, list_of_ids)\n```","ref":"pretrained.html#encode-and-decode","title":"Encode and decode - Pretrained Tokenizers","type":"extras"},{"doc":"Typically the reason we're tokenizing text is to use it as an input in a machine learning model. For that, we'll need tensors.\n\nIn order to get a tensor, we need sequences that are all of the same length. We'll get some data from `Scidata` and use `Tokenizers.Encoding.pad/3` and `Tokenizers.Encoding.truncate/3` to yield a tensor.\n\n```elixir\n%{review: reviews} = Scidata.YelpPolarityReviews.download_test()\n```\n\n```elixir\n{:ok, encoding_batch} =\n  reviews\n  |> Enum.take(10)\n  |> then(&Tokenizer.encode_batch(tokenizer, &1))\n\ntensor =\n  encoding_batch\n  |> Enum.map(fn encoding ->\n    encoding\n    |> Encoding.pad(200)\n    |> Encoding.truncate(200)\n    |> Encoding.get_ids()\n  end)\n  |> Nx.tensor()\n```\n\nAnd we can reverse the operation to see our data. Note the `[PAD]` tokens.\n\n```elixir\ntensor\n|> Nx.to_batched(1)\n|> Enum.map(&Nx.to_flat_list/1)\n|> then(&Tokenizer.decode_batch(tokenizer, &1))\n```","ref":"pretrained.html#get-a-tensor","title":"Get a tensor - Pretrained Tokenizers","type":"extras"}]}