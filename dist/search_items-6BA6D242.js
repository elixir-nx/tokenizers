searchNodes=[{"doc":"Elixir bindings to Hugging Face Tokenizers . Hugging Face describes the Tokenizers library as: Fast State-of-the-art tokenizers, optimized for both research and production ü§ó Tokenizers provides an implementation of today‚Äôs most used tokenizers, with a focus on performance and versatility. These tokenizers are also used in ü§ó Transformers. This library has bindings to use pretrained tokenizers. Support for building and training a tokenizer from scratch is forthcoming. A tokenizer is effectively a pipeline of transforms to take some input text and return a Tokenizers.Encoding.t() . The main entrypoint to this library is the Tokenizers.Tokenizer module, which holds the Tokenizers.Tokenizer.t() struct, a container holding the constituent parts of the pipeline. Most functionality is there.","ref":"Tokenizers.html","title":"Tokenizers","type":"module"},{"doc":"This struct represents AddedTokens","ref":"Tokenizers.AddedToken.html","title":"Tokenizers.AddedToken","type":"module"},{"doc":"Retrieves information about added token.","ref":"Tokenizers.AddedToken.html#info/1","title":"Tokenizers.AddedToken.info/1","type":"function"},{"doc":"Create a new AddedToken. :special (default false ) - defines whether this token is a special token. :single_word (default false ) - defines whether this token should only match single words. If true , this token will never match inside of a word. For example the token ing would match on tokenizing if this option is false , but not if it is true . The notion of ‚Äùinside of a word‚Äù is defined by the word boundaries pattern in regular expressions (i.e. the token should start and end with word boundaries). :lstrip (default false ) - defines whether this token should strip all potential whitespaces on its left side. If true , this token will greedily match any whitespace on its left. For example if we try to match the token [MASK] with lstrip=true , in the text &quot;I saw a [MASK]&quot; , we would match on &quot; [MASK]&quot; . (Note the space on the left). :rstrip (default false ) - defines whether this token should strip all potential whitespaces on its right side. If true , this token will greedily match any whitespace on its right. It works just like lstrip but on the right. :normalized (default true for not special tokens, false for special tokens) - defines whether this token should match against the normalized version of the input text. For example, with the added token &quot;yesterday&quot; , and a normalizer in charge of lowercasing the text, the token could be extract from the input &quot;I saw a lion Yesterday&quot; . If true , the token will be extracted from the normalized input &quot;i saw a lion yesterday&quot; . If false , the token will be extracted from the original input &quot;I saw a lion Yesterday&quot; .","ref":"Tokenizers.AddedToken.html#new/2","title":"Tokenizers.AddedToken.new/2","type":"function"},{"doc":"Options for added token initialisation. All options can be ommited.","ref":"Tokenizers.AddedToken.html#t:opts/0","title":"Tokenizers.AddedToken.opts/0","type":"type"},{"doc":"","ref":"Tokenizers.AddedToken.html#t:t/0","title":"Tokenizers.AddedToken.t/0","type":"type"},{"doc":"The Decoder knows how to go from the IDs used by the Tokenizer, back to a readable piece of text. Some Normalizer and PreTokenizer use special characters or identifiers that need to be reverted.","ref":"Tokenizers.Decoder.html","title":"Tokenizers.Decoder","type":"module"},{"doc":"Creates new BPE decoder","ref":"Tokenizers.Decoder.html#bpe/1","title":"Tokenizers.Decoder.bpe/1","type":"function"},{"doc":"Creates new ByteFallback decoder","ref":"Tokenizers.Decoder.html#byte_fallback/0","title":"Tokenizers.Decoder.byte_fallback/0","type":"function"},{"doc":"Creates new ByteLevel decoder","ref":"Tokenizers.Decoder.html#byte_level/0","title":"Tokenizers.Decoder.byte_level/0","type":"function"},{"doc":"Creates new CTC decoder","ref":"Tokenizers.Decoder.html#ctc/1","title":"Tokenizers.Decoder.ctc/1","type":"function"},{"doc":"Decodes tokens into string with provided decoder.","ref":"Tokenizers.Decoder.html#decode/2","title":"Tokenizers.Decoder.decode/2","type":"function"},{"doc":"Creates new Fuse decoder","ref":"Tokenizers.Decoder.html#fuse/0","title":"Tokenizers.Decoder.fuse/0","type":"function"},{"doc":"Creates new Metaspace decoder","ref":"Tokenizers.Decoder.html#metaspace/1","title":"Tokenizers.Decoder.metaspace/1","type":"function"},{"doc":"Creates new Replace decoder","ref":"Tokenizers.Decoder.html#replace/2","title":"Tokenizers.Decoder.replace/2","type":"function"},{"doc":"Creates new Sequence decoder","ref":"Tokenizers.Decoder.html#sequence/1","title":"Tokenizers.Decoder.sequence/1","type":"function"},{"doc":"Creates new Strip decoder. It expects a character and the number of times to strip the character on left and right sides.","ref":"Tokenizers.Decoder.html#strip/3","title":"Tokenizers.Decoder.strip/3","type":"function"},{"doc":"Creates new WordPiece decoder","ref":"Tokenizers.Decoder.html#word_piece/1","title":"Tokenizers.Decoder.word_piece/1","type":"function"},{"doc":"Options for BPE decoder initialization. All options can be ommited. suffix - The suffix to add to the end of each word, defaults to &lt;/w&gt;","ref":"Tokenizers.Decoder.html#t:bpe_options/0","title":"Tokenizers.Decoder.bpe_options/0","type":"type"},{"doc":"Options for CTC decoder initialization. All options can be ommited. pad_token - The token used for padding, defaults to &lt;pad&gt; word_delimiter_token - The token used for word delimiter, defaults to | cleanup - Whether to cleanup tokenization artifacts, defaults to true","ref":"Tokenizers.Decoder.html#t:ctc_options/0","title":"Tokenizers.Decoder.ctc_options/0","type":"type"},{"doc":"Options for Metaspace decoder initialization. All options can be ommited. replacement - The replacement character, defaults to ‚ñÅ (as char) add_prefix_space - Whether to add a space to the first word, defaults to true","ref":"Tokenizers.Decoder.html#t:metaspace_options/0","title":"Tokenizers.Decoder.metaspace_options/0","type":"type"},{"doc":"","ref":"Tokenizers.Decoder.html#t:t/0","title":"Tokenizers.Decoder.t/0","type":"type"},{"doc":"Options for WordPiece decoder initialization. All options can be ommited. prefix - The prefix to use for subwords, defaults to ## cleanup - Whether to cleanup tokenization artifacts, defaults to true","ref":"Tokenizers.Decoder.html#t:word_piece_options/0","title":"Tokenizers.Decoder.word_piece_options/0","type":"type"},{"doc":"The struct and associated functions for an encoding, the output of a tokenizer. Use these functions to retrieve the inputs needed for a natural language processing machine learning model.","ref":"Tokenizers.Encoding.html","title":"Tokenizers.Encoding","type":"module"},{"doc":"Get the attention mask from an encoding.","ref":"Tokenizers.Encoding.html#get_attention_mask/1","title":"Tokenizers.Encoding.get_attention_mask/1","type":"function"},{"doc":"Get the ids from an encoding.","ref":"Tokenizers.Encoding.html#get_ids/1","title":"Tokenizers.Encoding.get_ids/1","type":"function"},{"doc":"Get offsets from an encoding. The offsets are expressed in terms of UTF-8 bytes.","ref":"Tokenizers.Encoding.html#get_offsets/1","title":"Tokenizers.Encoding.get_offsets/1","type":"function"},{"doc":"Get special tokens mask from an encoding.","ref":"Tokenizers.Encoding.html#get_special_tokens_mask/1","title":"Tokenizers.Encoding.get_special_tokens_mask/1","type":"function"},{"doc":"Get the tokens from an encoding.","ref":"Tokenizers.Encoding.html#get_tokens/1","title":"Tokenizers.Encoding.get_tokens/1","type":"function"},{"doc":"Get token type ids from an encoding.","ref":"Tokenizers.Encoding.html#get_type_ids/1","title":"Tokenizers.Encoding.get_type_ids/1","type":"function"},{"doc":"Same as get_attention_mask/1 , but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_attention_mask/1","title":"Tokenizers.Encoding.get_u32_attention_mask/1","type":"function"},{"doc":"Same as get_ids/1 , but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_ids/1","title":"Tokenizers.Encoding.get_u32_ids/1","type":"function"},{"doc":"Same as get_special_tokens_mask/1 , but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_special_tokens_mask/1","title":"Tokenizers.Encoding.get_u32_special_tokens_mask/1","type":"function"},{"doc":"Same as get_type_ids/1 , but returns binary with u32 values.","ref":"Tokenizers.Encoding.html#get_u32_type_ids/1","title":"Tokenizers.Encoding.get_u32_type_ids/1","type":"function"},{"doc":"Returns the number of tokens in an Encoding.t() .","ref":"Tokenizers.Encoding.html#n_tokens/1","title":"Tokenizers.Encoding.n_tokens/1","type":"function"},{"doc":"Pad the encoding to the given length. Options direction - The padding direction. Can be :right or :left . Default: :right . pad_id - The id corresponding to the padding token. Default: 0 . pad_token - The padding token to use. Default: &quot;[PAD]&quot; . pad_type_id - The type ID corresponding to the padding token. Default: 0 .","ref":"Tokenizers.Encoding.html#pad/3","title":"Tokenizers.Encoding.pad/3","type":"function"},{"doc":"Truncate the encoding to the given length. Options direction - The truncation direction. Can be :right or :left . Default: :right . stride - The length of previous content to be included in each overflowing piece. Default: 0 .","ref":"Tokenizers.Encoding.html#truncate/3","title":"Tokenizers.Encoding.truncate/3","type":"function"},{"doc":"","ref":"Tokenizers.Encoding.html#t:t/0","title":"Tokenizers.Encoding.t/0","type":"type"},{"doc":"A simple implementation of an HTTP client. This is using the built-in :httpc module, configured to use SSL. The request/1 function is similar to Req.request/1 .","ref":"Tokenizers.HTTPClient.html","title":"Tokenizers.HTTPClient","type":"module"},{"doc":"Make an HTTP(s) requests. Options :method - An HTTP method. By default it uses the :get method. :base_url - The base URL to make requests. By default is &quot; https://huggingface.io&quot; . :url - A path to a resource. By default is &quot;&quot;. :headers - A list of tuples representing HTTP headers. By default it's empty.","ref":"Tokenizers.HTTPClient.html#request/1","title":"Tokenizers.HTTPClient.request/1","type":"function"},{"doc":"The struct and associated functions for the tokenizer model.","ref":"Tokenizers.Model.html","title":"Tokenizers.Model","type":"module"},{"doc":"Retrieves information about the model. Information retrieved differs per model but all include model_type .","ref":"Tokenizers.Model.html#info/1","title":"Tokenizers.Model.info/1","type":"function"},{"doc":"Save the current model in the given folder, using the given name for the various files that will get created. Any file with the same name that already exist in this folder will be overwritten.","ref":"Tokenizers.Model.html#save/3","title":"Tokenizers.Model.save/3","type":"function"},{"doc":"Options to save the model. All options can be ommited. :prefix (default &quot;&quot; ) - The prefix to use for all the files that will get created.","ref":"Tokenizers.Model.html#t:save_opts/0","title":"Tokenizers.Model.save_opts/0","type":"type"},{"doc":"Represents different kind of models that can be used across the library.","ref":"Tokenizers.Model.html#t:t/0","title":"Tokenizers.Model.t/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.BPE.html","title":"Tokenizers.Model.BPE","type":"module"},{"doc":"Instantiate an empty BPE Model","ref":"Tokenizers.Model.BPE.html#empty/0","title":"Tokenizers.Model.BPE.empty/0","type":"function"},{"doc":"Instantiate a BPE model from the given vocab and merges files","ref":"Tokenizers.Model.BPE.html#from_file/3","title":"Tokenizers.Model.BPE.from_file/3","type":"function"},{"doc":"Instantiate a BPE model from the given vocab and merges","ref":"Tokenizers.Model.BPE.html#init/3","title":"Tokenizers.Model.BPE.init/3","type":"function"},{"doc":"Options for model initialisation. All options can be ommited. :cache_capacity (default 10_000 ) - The number of words that the BPE cache can contain. The cache allows to speed-up the process by keeping the result of the merge operations for a number of words. :dropout - The BPE dropout to use. Must be an float between 0 and 1 :unk_token - The unknown token to be used by the model :continuing_subword_prefix - The prefix to attach to subword units that don't represent a beginning of word :end_of_word_suffix - The suffix to attach to subword units that represent an end of word","ref":"Tokenizers.Model.BPE.html#t:options/0","title":"Tokenizers.Model.BPE.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.Unigram.html","title":"Tokenizers.Model.Unigram","type":"module"},{"doc":"Instantiate an empty Unigram model","ref":"Tokenizers.Model.Unigram.html#empty/0","title":"Tokenizers.Model.Unigram.empty/0","type":"function"},{"doc":"Instantiate a Unigram model from the given vocab","ref":"Tokenizers.Model.Unigram.html#init/2","title":"Tokenizers.Model.Unigram.init/2","type":"function"},{"doc":"Options for model initialisation. All options can be ommited. :unk_id - The unknown token id to be used by the model.","ref":"Tokenizers.Model.Unigram.html#t:options/0","title":"Tokenizers.Model.Unigram.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.WordLevel.html","title":"Tokenizers.Model.WordLevel","type":"module"},{"doc":"Instantiate an empty WordLevel model","ref":"Tokenizers.Model.WordLevel.html#empty/0","title":"Tokenizers.Model.WordLevel.empty/0","type":"function"},{"doc":"Instantiate a WordLevel model from the given vocab file","ref":"Tokenizers.Model.WordLevel.html#from_file/2","title":"Tokenizers.Model.WordLevel.from_file/2","type":"function"},{"doc":"Instantiate a WordLevel model from the given vocab","ref":"Tokenizers.Model.WordLevel.html#init/2","title":"Tokenizers.Model.WordLevel.init/2","type":"function"},{"doc":"Options for model initialisation. All options can be ommited. :unk_token (default &quot;[UNK]&quot; ) - The unknown token to be used by the model.","ref":"Tokenizers.Model.WordLevel.html#t:options/0","title":"Tokenizers.Model.WordLevel.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Model.WordPiece.html","title":"Tokenizers.Model.WordPiece","type":"module"},{"doc":"Instantiate an empty WordPiece model","ref":"Tokenizers.Model.WordPiece.html#empty/0","title":"Tokenizers.Model.WordPiece.empty/0","type":"function"},{"doc":"Instantiate a WordPiece model from the given vocab file","ref":"Tokenizers.Model.WordPiece.html#from_file/2","title":"Tokenizers.Model.WordPiece.from_file/2","type":"function"},{"doc":"Instantiate a WordPiece model from the given vocab","ref":"Tokenizers.Model.WordPiece.html#init/2","title":"Tokenizers.Model.WordPiece.init/2","type":"function"},{"doc":"Options for model initialisation. All options can be ommited. :unk_token (default &quot;[UNK]&quot; ) - The unknown token to be used by the model. :max_input_chars_per_word (default 100 ) - The maximum number of characters to authorize in a single word. :continuing_subword_prefix (default &quot;##&quot; ) - The prefix to attach to subword units that don't represent a beginning of word","ref":"Tokenizers.Model.WordPiece.html#t:options/0","title":"Tokenizers.Model.WordPiece.options/0","type":"type"},{"doc":"","ref":"Tokenizers.Native.html","title":"Tokenizers.Native","type":"module"},{"doc":"","ref":"Tokenizers.Native.html#added_token_info/1","title":"Tokenizers.Native.added_token_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#added_token_new/2","title":"Tokenizers.Native.added_token_new/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decode/3","title":"Tokenizers.Native.decode/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decode_batch/3","title":"Tokenizers.Native.decode_batch/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_bpe/1","title":"Tokenizers.Native.decoders_bpe/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_byte_fallback/0","title":"Tokenizers.Native.decoders_byte_fallback/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_byte_level/0","title":"Tokenizers.Native.decoders_byte_level/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_ctc/1","title":"Tokenizers.Native.decoders_ctc/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_decode/2","title":"Tokenizers.Native.decoders_decode/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_fuse/0","title":"Tokenizers.Native.decoders_fuse/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_info/1","title":"Tokenizers.Native.decoders_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_metaspace/1","title":"Tokenizers.Native.decoders_metaspace/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_replace/2","title":"Tokenizers.Native.decoders_replace/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_sequence/1","title":"Tokenizers.Native.decoders_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_strip/3","title":"Tokenizers.Native.decoders_strip/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#decoders_wordpiece/1","title":"Tokenizers.Native.decoders_wordpiece/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encode/3","title":"Tokenizers.Native.encode/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#encode_batch/3","title":"Tokenizers.Native.encode_batch/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#from_file/2","title":"Tokenizers.Native.from_file/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_attention_mask/1","title":"Tokenizers.Native.get_attention_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_ids/1","title":"Tokenizers.Native.get_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_model/1","title":"Tokenizers.Native.get_model/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_model_details/1","title":"Tokenizers.Native.get_model_details/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_offsets/1","title":"Tokenizers.Native.get_offsets/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_special_tokens_mask/1","title":"Tokenizers.Native.get_special_tokens_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_tokens/1","title":"Tokenizers.Native.get_tokens/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_type_ids/1","title":"Tokenizers.Native.get_type_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_u32_attention_mask/1","title":"Tokenizers.Native.get_u32_attention_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_u32_ids/1","title":"Tokenizers.Native.get_u32_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_u32_special_tokens_mask/1","title":"Tokenizers.Native.get_u32_special_tokens_mask/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_u32_type_ids/1","title":"Tokenizers.Native.get_u32_type_ids/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_vocab/2","title":"Tokenizers.Native.get_vocab/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#get_vocab_size/2","title":"Tokenizers.Native.get_vocab_size/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#id_to_token/2","title":"Tokenizers.Native.id_to_token/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_bpe_empty/0","title":"Tokenizers.Native.models_bpe_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_bpe_from_file/3","title":"Tokenizers.Native.models_bpe_from_file/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_bpe_init/3","title":"Tokenizers.Native.models_bpe_init/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_info/1","title":"Tokenizers.Native.models_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_save/3","title":"Tokenizers.Native.models_save/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_unigram_empty/0","title":"Tokenizers.Native.models_unigram_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_unigram_init/2","title":"Tokenizers.Native.models_unigram_init/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordlevel_empty/0","title":"Tokenizers.Native.models_wordlevel_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordlevel_from_file/2","title":"Tokenizers.Native.models_wordlevel_from_file/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordlevel_init/2","title":"Tokenizers.Native.models_wordlevel_init/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordpiece_empty/0","title":"Tokenizers.Native.models_wordpiece_empty/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordpiece_from_file/2","title":"Tokenizers.Native.models_wordpiece_from_file/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#models_wordpiece_init/2","title":"Tokenizers.Native.models_wordpiece_init/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#n_tokens/1","title":"Tokenizers.Native.n_tokens/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_bert_normalizer/1","title":"Tokenizers.Native.normalizers_bert_normalizer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_info/1","title":"Tokenizers.Native.normalizers_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_lowercase/0","title":"Tokenizers.Native.normalizers_lowercase/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfc/0","title":"Tokenizers.Native.normalizers_nfc/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfd/0","title":"Tokenizers.Native.normalizers_nfd/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfkc/0","title":"Tokenizers.Native.normalizers_nfkc/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nfkd/0","title":"Tokenizers.Native.normalizers_nfkd/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_nmt/0","title":"Tokenizers.Native.normalizers_nmt/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_normalize/2","title":"Tokenizers.Native.normalizers_normalize/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_precompiled/1","title":"Tokenizers.Native.normalizers_precompiled/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_prepend/1","title":"Tokenizers.Native.normalizers_prepend/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_replace/2","title":"Tokenizers.Native.normalizers_replace/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_sequence/1","title":"Tokenizers.Native.normalizers_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_strip/1","title":"Tokenizers.Native.normalizers_strip/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#normalizers_strip_accents/0","title":"Tokenizers.Native.normalizers_strip_accents/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pad/6","title":"Tokenizers.Native.pad/6","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_bert/2","title":"Tokenizers.Native.post_processors_bert/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_byte_level/1","title":"Tokenizers.Native.post_processors_byte_level/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_info/1","title":"Tokenizers.Native.post_processors_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_roberta/3","title":"Tokenizers.Native.post_processors_roberta/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_sequence/1","title":"Tokenizers.Native.post_processors_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#post_processors_template/1","title":"Tokenizers.Native.post_processors_template/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_bert/0","title":"Tokenizers.Native.pre_tokenizers_bert/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_byte_level/1","title":"Tokenizers.Native.pre_tokenizers_byte_level/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_byte_level_alphabet/0","title":"Tokenizers.Native.pre_tokenizers_byte_level_alphabet/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_char_delimiter_split/1","title":"Tokenizers.Native.pre_tokenizers_char_delimiter_split/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_digits/1","title":"Tokenizers.Native.pre_tokenizers_digits/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_info/1","title":"Tokenizers.Native.pre_tokenizers_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_metaspace/1","title":"Tokenizers.Native.pre_tokenizers_metaspace/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_pre_tokenize/2","title":"Tokenizers.Native.pre_tokenizers_pre_tokenize/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_punctuation/1","title":"Tokenizers.Native.pre_tokenizers_punctuation/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_sequence/1","title":"Tokenizers.Native.pre_tokenizers_sequence/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_split/3","title":"Tokenizers.Native.pre_tokenizers_split/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_whitespace/0","title":"Tokenizers.Native.pre_tokenizers_whitespace/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#pre_tokenizers_whitespace_split/0","title":"Tokenizers.Native.pre_tokenizers_whitespace_split/0","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#save/3","title":"Tokenizers.Native.save/3","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#token_to_id/2","title":"Tokenizers.Native.token_to_id/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_bpe_trainer/1","title":"Tokenizers.Native.trainers_bpe_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_info/1","title":"Tokenizers.Native.trainers_info/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_train/2","title":"Tokenizers.Native.trainers_train/2","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_unigram_trainer/1","title":"Tokenizers.Native.trainers_unigram_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_wordlevel_trainer/1","title":"Tokenizers.Native.trainers_wordlevel_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#trainers_wordpiece_trainer/1","title":"Tokenizers.Native.trainers_wordpiece_trainer/1","type":"function"},{"doc":"","ref":"Tokenizers.Native.html#truncate/4","title":"Tokenizers.Native.truncate/4","type":"function"},{"doc":"A Normalizer is in charge of pre-processing the input string in order to normalize it as relevant for a given use case. Some common examples of normalization are the Unicode normalization algorithms (NFD, NFKD, NFC &amp; NFKC), lowercasing etc... The specificity of tokenizers is that we keep track of the alignment while normalizing. This is essential to allow mapping from the generated tokens back to the input text. The Normalizer is optional.","ref":"Tokenizers.Normalizer.html","title":"Tokenizers.Normalizer","type":"module"},{"doc":"Takes care of normalizing raw text before giving it to a Bert model. This includes cleaning the text, handling accents, chinese chars and lowercasing.","ref":"Tokenizers.Normalizer.html#bert_normalizer/1","title":"Tokenizers.Normalizer.bert_normalizer/1","type":"function"},{"doc":"Replaces all uppercase to lowercase","ref":"Tokenizers.Normalizer.html#lowercase/0","title":"Tokenizers.Normalizer.lowercase/0","type":"function"},{"doc":"NFC Unicode Normalizer","ref":"Tokenizers.Normalizer.html#nfc/0","title":"Tokenizers.Normalizer.nfc/0","type":"function"},{"doc":"NFD Unicode Normalizer,","ref":"Tokenizers.Normalizer.html#nfd/0","title":"Tokenizers.Normalizer.nfd/0","type":"function"},{"doc":"NFKC Unicode Normalizer","ref":"Tokenizers.Normalizer.html#nfkc/0","title":"Tokenizers.Normalizer.nfkc/0","type":"function"},{"doc":"NFKD Unicode Normalizer","ref":"Tokenizers.Normalizer.html#nfkd/0","title":"Tokenizers.Normalizer.nfkd/0","type":"function"},{"doc":"Nmt normalizer","ref":"Tokenizers.Normalizer.html#nmt/0","title":"Tokenizers.Normalizer.nmt/0","type":"function"},{"doc":"Normalizes the input presented as string into new string","ref":"Tokenizers.Normalizer.html#normalize/2","title":"Tokenizers.Normalizer.normalize/2","type":"function"},{"doc":"Precompiled normalizer. Don‚Äôt use manually it is used for compatiblity for SentencePiece.","ref":"Tokenizers.Normalizer.html#precompiled/1","title":"Tokenizers.Normalizer.precompiled/1","type":"function"},{"doc":"Prepend normalizer.","ref":"Tokenizers.Normalizer.html#prepend/1","title":"Tokenizers.Normalizer.prepend/1","type":"function"},{"doc":"Replaces a custom string or regexp and changes it with given content","ref":"Tokenizers.Normalizer.html#replace/2","title":"Tokenizers.Normalizer.replace/2","type":"function"},{"doc":"Composes multiple normalizers that will run in the provided order.","ref":"Tokenizers.Normalizer.html#sequence/1","title":"Tokenizers.Normalizer.sequence/1","type":"function"},{"doc":"Strip normalizer. Removes all whitespace characters on the specified sides (left, right or both) of the input","ref":"Tokenizers.Normalizer.html#strip/1","title":"Tokenizers.Normalizer.strip/1","type":"function"},{"doc":"Strip Accent normalizer. Removes all accent symbols in unicode (to be used with NFD for consistency).","ref":"Tokenizers.Normalizer.html#strip_accents/0","title":"Tokenizers.Normalizer.strip_accents/0","type":"function"},{"doc":"Options for BERT normalizer initialisation. All values are optional. :clean_text (default true ) - Whether to clean the text, by removing any control characters and replacing all whitespaces by the classic one. :handle_chinese_chars (default true ) - Whether to handle chinese chars by putting spaces around them. :strip_accents - Whether to strip all accents. If this option is not specified, then it will be determined by the value for lowercase (as in the original Bert). :lowercase (default true ) - Whether to lowercase.","ref":"Tokenizers.Normalizer.html#t:bert_opts/0","title":"Tokenizers.Normalizer.bert_opts/0","type":"type"},{"doc":"Options for Strip normalizer initialisation. All values are optional. :left (default true ) - Whether to strip left side. :right (default true ) - Whether to strip right side.","ref":"Tokenizers.Normalizer.html#t:strip_opts/0","title":"Tokenizers.Normalizer.strip_opts/0","type":"type"},{"doc":"","ref":"Tokenizers.Normalizer.html#t:t/0","title":"Tokenizers.Normalizer.t/0","type":"type"},{"doc":"After the whole pipeline, we sometimes want to insert some special tokens before feed a tokenized string into a model like ‚Äù[CLS] My horse is amazing [SEP]‚Äù. The PostProcessor is the component doing just that.","ref":"Tokenizers.PostProcessor.html","title":"Tokenizers.PostProcessor","type":"module"},{"doc":"Instantiate a new BertProcessing with the given tokens Params are tuple with the string representation of the token, and its id","ref":"Tokenizers.PostProcessor.html#bert/2","title":"Tokenizers.PostProcessor.bert/2","type":"function"},{"doc":"Creates ByteLevel post-processor.","ref":"Tokenizers.PostProcessor.html#byte_level/1","title":"Tokenizers.PostProcessor.byte_level/1","type":"function"},{"doc":"Creates Roberta post-processor.","ref":"Tokenizers.PostProcessor.html#roberta/3","title":"Tokenizers.PostProcessor.roberta/3","type":"function"},{"doc":"Instantiate a new Sequence post-processor","ref":"Tokenizers.PostProcessor.html#sequence/1","title":"Tokenizers.PostProcessor.sequence/1","type":"function"},{"doc":"Creates Template post-processor. Let‚Äôs you easily template the post processing, adding special tokens, and specifying the type_id for each sequence/special token. The template is given two strings representing the single sequence and the pair of sequences, as well as a set of special tokens to use. Example, when specifying a template with these values: single: &quot;[CLS] $A [SEP]&quot; pair: &quot;[CLS] $A [SEP] $B [SEP]&quot; special tokens: &quot;[CLS]&quot; &quot;[SEP]&quot; Input: (&quot;I like this&quot;, &quot;but not this&quot;) Output: &quot;[CLS] I like this [SEP] but not this [SEP]&quot;","ref":"Tokenizers.PostProcessor.html#template/1","title":"Tokenizers.PostProcessor.template/1","type":"function"},{"doc":"Options for ByteLevel post-processor. All values are optional. :trim_offsets (default true ) - Whether to trim the whitespaces in the produced offsets","ref":"Tokenizers.PostProcessor.html#t:byte_level_opts/0","title":"Tokenizers.PostProcessor.byte_level_opts/0","type":"type"},{"doc":"Options for Roberta post-processor. All values are optional. :trim_offest (default true ) - Whether to trim the whitespaces in the produced offsets :add_prefix_space (default true ) - Whether add_prefix_space was ON during the pre-tokenization.","ref":"Tokenizers.PostProcessor.html#t:roberta_opts/0","title":"Tokenizers.PostProcessor.roberta_opts/0","type":"type"},{"doc":"","ref":"Tokenizers.PostProcessor.html#t:t/0","title":"Tokenizers.PostProcessor.t/0","type":"type"},{"doc":"Options for Template post-processor. :single - A string describing the template for a single sequence. :pair - A string describing the template for a pair of sequences. :special_tokens - A list of special tokens to use in the template.","ref":"Tokenizers.PostProcessor.html#t:template_opts/0","title":"Tokenizers.PostProcessor.template_opts/0","type":"type"},{"doc":"The PreTokenizer takes care of splitting the input according to a set of rules. This pre-processing lets you ensure that the underlying Model does not build tokens across multiple ‚Äúsplits‚Äù. For example if you don‚Äôt want to have whitespaces inside a token, then you can have a PreTokenizer that splits on these whitespaces. You can easily combine multiple PreTokenizer together using a Sequence (see below). The PreTokenizer is also allowed to modify the string, just like a Normalizer does. This is necessary to allow some complicated algorithms that require to split before normalizing (e.g. the ByteLevel)","ref":"Tokenizers.PreTokenizer.html","title":"Tokenizers.PreTokenizer","type":"module"},{"doc":"Creates BertPreTokenizer pre-tokenizer. Splits for use in Bert models.","ref":"Tokenizers.PreTokenizer.html#bert_pre_tokenizer/0","title":"Tokenizers.PreTokenizer.bert_pre_tokenizer/0","type":"function"},{"doc":"Creates ByteLevel PreTokenizer. Splits on whitespaces while remapping all the bytes to a set of visible characters. This technique as been introduced by OpenAI with GPT-2 and has some more or less nice properties: Since it maps on bytes, a tokenizer using this only requires 256 characters as initial alphabet (the number of values a byte can have), as opposed to the 130,000+ Unicode characters. A consequence of the previous point is that it is absolutely unnecessary to have an unknown token using this since we can represent anything with 256 tokens (Youhou!! üéâüéâ) For non ascii characters, it gets completely unreadable, but it works nonetheless!","ref":"Tokenizers.PreTokenizer.html#byte_level/1","title":"Tokenizers.PreTokenizer.byte_level/1","type":"function"},{"doc":"Gets ByteLevel pre-tokenizer's alphabet.","ref":"Tokenizers.PreTokenizer.html#byte_level_alphabet/0","title":"Tokenizers.PreTokenizer.byte_level_alphabet/0","type":"function"},{"doc":"Creates CharDelimiterSplit pre-tokenizer. This pre-tokenizer simply splits on the provided delimiter. Works almost like the .split(delimiter) function, except that it accounts for multiple consecutive spaces","ref":"Tokenizers.PreTokenizer.html#char_delimiter_split/1","title":"Tokenizers.PreTokenizer.char_delimiter_split/1","type":"function"},{"doc":"Creates Digits pre-tokenizer. Splits the numbers from any other characters.","ref":"Tokenizers.PreTokenizer.html#digits/1","title":"Tokenizers.PreTokenizer.digits/1","type":"function"},{"doc":"Creates Metaspace pre-tokenizer. Splits on whitespaces and replaces them with a special char ‚Äú‚ñÅ‚Äù (U+2581)","ref":"Tokenizers.PreTokenizer.html#metaspace/1","title":"Tokenizers.PreTokenizer.metaspace/1","type":"function"},{"doc":"Converts a string into a sequence of pre-tokens.","ref":"Tokenizers.PreTokenizer.html#pre_tokenize/2","title":"Tokenizers.PreTokenizer.pre_tokenize/2","type":"function"},{"doc":"Creates Punctuation pre-tokenizer. Will isolate all punctuation characters.","ref":"Tokenizers.PreTokenizer.html#punctuation/1","title":"Tokenizers.PreTokenizer.punctuation/1","type":"function"},{"doc":"Creates Sequence pre-tokenizer. Lets you compose multiple PreTokenizer that will be run in the given order","ref":"Tokenizers.PreTokenizer.html#sequence/1","title":"Tokenizers.PreTokenizer.sequence/1","type":"function"},{"doc":"Creates Split pre-tokenizer. Versatile pre-tokenizer that splits on provided pattern and according to provided behavior. The pattern can be inverted if necessary. pattern should be either a custom string or regexp. behavior should be one of: :removed :isolated :merged_with_previous :merged_with_next :contiguous","ref":"Tokenizers.PreTokenizer.html#split/3","title":"Tokenizers.PreTokenizer.split/3","type":"function"},{"doc":"Creates Whitespace pre-tokenizer. Splits on word boundaries (using the following regular expression: w+|[^w ]+","ref":"Tokenizers.PreTokenizer.html#whitespace/0","title":"Tokenizers.PreTokenizer.whitespace/0","type":"function"},{"doc":"Creates WhitespaceSplit pre-tokenizer. Splits on any whitespace character","ref":"Tokenizers.PreTokenizer.html#whitespace_split/0","title":"Tokenizers.PreTokenizer.whitespace_split/0","type":"function"},{"doc":"Options for ByteLevel pre-tokenizer. All values are optional. :add_prefix_space (default true ) - Whether to add a space to the first word if there isn‚Äôt already one. This lets us treat hello exactly like say hello. :use_regex (default true ) - Set this to False to prevent this pre_tokenizer from using the GPT2 specific regexp for spliting on whitespace.","ref":"Tokenizers.PreTokenizer.html#t:byte_level_opts/0","title":"Tokenizers.PreTokenizer.byte_level_opts/0","type":"type"},{"doc":"Options for Digits pre-tokenizer. All values are optional. :individual_digits (default false ) - Whether to split individual digits or not.","ref":"Tokenizers.PreTokenizer.html#t:digits_opts/0","title":"Tokenizers.PreTokenizer.digits_opts/0","type":"type"},{"doc":"Options for Metaspace pre-tokenizer. All values are optional. :replacement (default &quot;‚ñÅ&quot; ) - The replacement character to use. :add_prefix_space (default true ) - Whether to add a space to the first word if there isn‚Äôt already one. This lets us treat hello exactly like say hello.","ref":"Tokenizers.PreTokenizer.html#t:metaspace_opts/0","title":"Tokenizers.PreTokenizer.metaspace_opts/0","type":"type"},{"doc":"Options for Split pre-tokenizer. All values are optional. :invert (default false ) - Whether to invert the split or not.","ref":"Tokenizers.PreTokenizer.html#t:spit_opts/0","title":"Tokenizers.PreTokenizer.spit_opts/0","type":"type"},{"doc":"Specifies how delimiter should behave for several pretokenizers.","ref":"Tokenizers.PreTokenizer.html#t:split_delimiter_behaviour/0","title":"Tokenizers.PreTokenizer.split_delimiter_behaviour/0","type":"type"},{"doc":"","ref":"Tokenizers.PreTokenizer.html#t:t/0","title":"Tokenizers.PreTokenizer.t/0","type":"type"},{"doc":"The struct and associated functions for a tokenizer. A Tokenizers.Tokenizer.t() is a container that holds the constituent parts of the tokenization pipeline. When you call Tokenizers.Tokenizer.encode/3 , the input text goes through the following pipeline: normalization pre-tokenization model post-processing This returns a Tokenizers.Encoding.t() , which can then give you the token ids for each token in the input text. These token ids are usually used as the input for natural language processing machine learning models.","ref":"Tokenizers.Tokenizer.html","title":"Tokenizers.Tokenizer","type":"module"},{"doc":"Decode the given list of ids or list of lists of ids back to strings. Options :skip_special_tokens - whether the special tokens should be removed from the decoded string. Defaults to true .","ref":"Tokenizers.Tokenizer.html#decode/3","title":"Tokenizers.Tokenizer.decode/3","type":"function"},{"doc":"Encode the given sequence or batch of sequences to a Tokenizers.Encoding.t() . Options :add_special_tokens - whether to add special tokens to the encoding. Defaults to true .","ref":"Tokenizers.Tokenizer.html#encode/3","title":"Tokenizers.Tokenizer.encode/3","type":"function"},{"doc":"Instantiate a new tokenizer from the file at the given path. Options :additional_special_tokens - A list of special tokens to append to the tokenizer. Defaults to [] .","ref":"Tokenizers.Tokenizer.html#from_file/2","title":"Tokenizers.Tokenizer.from_file/2","type":"function"},{"doc":"Instantiate a new tokenizer from an existing file on the Hugging Face Hub. This is going to download a tokenizer file, save it to disk and load that file. Options :http_client - A tuple with a module and options. This module should implement the request/1 function, accepting a keyword list with the options for a request. This is inspired by Req.request/1 : https://hexdocs.pm/req/Req.html#request/1 The default HTTP client config is: {Tokenizers.HTTPClient, []} . Since it's inspired by Req , it's possible to use that client without any adjustments. When making request, the options :url and :method are going to be overridden. :headers contains the &quot;user-agent&quot; set by default. :revision - The revision name that should be used for fetching the tokenizers from Hugging Face. :use_cache - Tells if it should read from cache when the file already exists. Defaults to true . :cache_dir - The directory where cache is saved. Files are written to cache even if :use_cache is false. By default it uses :filename.basedir/3 to get a cache dir based in the &quot;tokenizers_elixir&quot; application name. :additional_special_tokens - A list of special tokens to append to the tokenizer. Defaults to [] .","ref":"Tokenizers.Tokenizer.html#from_pretrained/2","title":"Tokenizers.Tokenizer.from_pretrained/2","type":"function"},{"doc":"Get the Tokenizer 's Model .","ref":"Tokenizers.Tokenizer.html#get_model/1","title":"Tokenizers.Tokenizer.get_model/1","type":"function"},{"doc":"Get the tokenizer's vocabulary as a map of token to id.","ref":"Tokenizers.Tokenizer.html#get_vocab/1","title":"Tokenizers.Tokenizer.get_vocab/1","type":"function"},{"doc":"Get the number of tokens in the vocabulary.","ref":"Tokenizers.Tokenizer.html#get_vocab_size/1","title":"Tokenizers.Tokenizer.get_vocab_size/1","type":"function"},{"doc":"Convert a given id to its token.","ref":"Tokenizers.Tokenizer.html#id_to_token/2","title":"Tokenizers.Tokenizer.id_to_token/2","type":"function"},{"doc":"Save the tokenizer to the provided path.","ref":"Tokenizers.Tokenizer.html#save/2","title":"Tokenizers.Tokenizer.save/2","type":"function"},{"doc":"Convert a given token to its id.","ref":"Tokenizers.Tokenizer.html#token_to_id/2","title":"Tokenizers.Tokenizer.token_to_id/2","type":"function"},{"doc":"An input being a subject to tokenization. Can be either a single sequence, or a pair of sequences.","ref":"Tokenizers.Tokenizer.html#t:encode_input/0","title":"Tokenizers.Tokenizer.encode_input/0","type":"type"},{"doc":"","ref":"Tokenizers.Tokenizer.html#t:t/0","title":"Tokenizers.Tokenizer.t/0","type":"type"},{"doc":"A Trainer has the responsibility to train a model. We feed it with lines/sentences and then it can train the given Model.","ref":"Tokenizers.Trainer.html","title":"Tokenizers.Trainer","type":"module"},{"doc":"Creates a new BPE Trainer.","ref":"Tokenizers.Trainer.html#bpe/1","title":"Tokenizers.Trainer.bpe/1","type":"function"},{"doc":"Get trainer info","ref":"Tokenizers.Trainer.html#info/1","title":"Tokenizers.Trainer.info/1","type":"function"},{"doc":"The actual training method. This will mutate a Model as well as return a list of special_tokens to be added directly to the tokenizer along with the model.","ref":"Tokenizers.Trainer.html#train/2","title":"Tokenizers.Trainer.train/2","type":"function"},{"doc":"Creates a new Unigram Trainer.","ref":"Tokenizers.Trainer.html#unigram/1","title":"Tokenizers.Trainer.unigram/1","type":"function"},{"doc":"Creates a new WordLevel Trainer.","ref":"Tokenizers.Trainer.html#wordlevel/1","title":"Tokenizers.Trainer.wordlevel/1","type":"function"},{"doc":"Creates a new WordPiece Trainer.","ref":"Tokenizers.Trainer.html#wordpiece/1","title":"Tokenizers.Trainer.wordpiece/1","type":"function"},{"doc":"Options for BPE trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:bpe_options/0","title":"Tokenizers.Trainer.bpe_options/0","type":"type"},{"doc":"","ref":"Tokenizers.Trainer.html#t:t/0","title":"Tokenizers.Trainer.t/0","type":"type"},{"doc":"Options for Unigram trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:unigram_options/0","title":"Tokenizers.Trainer.unigram_options/0","type":"type"},{"doc":"Options for WordLevel trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:wordlevel_options/0","title":"Tokenizers.Trainer.wordlevel_options/0","type":"type"},{"doc":"Options for WordPiece trainer initialisation. All options can be ommited.","ref":"Tokenizers.Trainer.html#t:wordpiece_options/0","title":"Tokenizers.Trainer.wordpiece_options/0","type":"type"},{"doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION 1. Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. 2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. 3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. 4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. 5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. 6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. 7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. 8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. 9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS","ref":"license.html","title":"LICENSE","type":"extras"},{"doc":"","ref":"pretrained.html","title":"Pretrained Tokenizers","type":"extras"},{"doc":"This Livebook will demonstrate how to use Tokenizers with pretrained tokenizers available on the Hugging Face Hub . We'll install Kino for user input and SciData for real data to tokenize. Mix . install ( [ { :kino , &quot;~&gt; 0.5.2&quot; } , { :scidata , &quot;~&gt; 0.1.5&quot; } , { :tokenizers , &quot;~&gt; 0.2.0&quot; } , { :nx , &quot;~&gt; 0.3&quot; } ] , force : true ) We'll alias modules in Tokenizers for readability. For now, the two main entry points into Tokenizers are the Tokenizer and Encoding modules. alias Tokenizers.Tokenizer alias Tokenizers.Encoding","ref":"pretrained.html#setup","title":"Pretrained Tokenizers - Setup","type":"extras"},{"doc":"The first thing to do is get a tokenizer from the hub. I've chosen bert-base-cased here as it's commonly used in Hugging Face examples. This call will download the tokenizer from the hub and load it into memory. { :ok , tokenizer } = Tokenizer . from_pretrained ( &quot;bert-base-cased&quot; )","ref":"pretrained.html#get-a-tokenizer","title":"Pretrained Tokenizers - Get a tokenizer","type":"extras"},{"doc":"You can save and load models. That means you can load in tokenizers you may have trained locally! You can choose the path with the Kino input below. input = Kino.Input . text ( &quot;Path&quot; ) path = Kino.Input . read ( input ) Tokenizer . save ( tokenizer , path ) { :ok , tokenizer } = Tokenizer . from_file ( path )","ref":"pretrained.html#save-and-load","title":"Pretrained Tokenizers - Save and load","type":"extras"},{"doc":"Let's see what we can do with the tokenizer. First, let's have a look at the vocab. It's represented as a map of tokens to ids. vocab = Tokenizer . get_vocab ( tokenizer ) We can access an id using the vocab, but we don't need to extract the vocab. Tokenizer.token_to_id/2 does the job for us. vocab [ &quot;Jaguar&quot; ] Tokenizer . token_to_id ( tokenizer , &quot;Jaguar&quot; ) And if we want to go back the other way... Tokenizer . id_to_token ( tokenizer , 21694 ) We can also see the vocab size. Tokenizer . get_vocab_size ( tokenizer )","ref":"pretrained.html#check-the-tokenizer","title":"Pretrained Tokenizers - Check the tokenizer","type":"extras"},{"doc":"When you tokenize some text you get an encoding. This is represented as Tokenizers.Encoding.t() . Because Tokenizers relies on Rust bindings, the encoding itself appears opaque. { :ok , encoding } = Tokenizer . encode ( tokenizer , &quot;Hello there!&quot; ) However, we can get the ids for the encoding as an Elixir list. ids = Encoding . get_ids ( encoding ) And we can decode those back into tokens. Tokenizer . decode ( tokenizer , ids ) Passing a batch of text as a list of strings returns a batch of encodings. { :ok , encodings } = Tokenizer . encode ( tokenizer , [ &quot;Hello there!&quot; , &quot;This is a test.&quot; ] ) And we can see the list of ids and decode them again. list_of_ids = Enum . map ( encodings , &amp; Encoding . get_ids / 1 ) Tokenizer . decode ( tokenizer , list_of_ids )","ref":"pretrained.html#encode-and-decode","title":"Pretrained Tokenizers - Encode and decode","type":"extras"},{"doc":"Typically the reason we're tokenizing text is to use it as an input in a machine learning model. For that, we'll need tensors. In order to get a tensor, we need sequences that are all of the same length. We'll get some data from Scidata and use Tokenizers.Encoding.pad/3 and Tokenizers.Encoding.truncate/3 to yield a tensor. %{ review : reviews } = Scidata.YelpPolarityReviews . download_test ( ) tensor = reviews |&gt; Enum . take ( 10 ) |&gt; Enum . map ( fn review -&gt; { :ok , tokenized } = Tokenizer . encode ( tokenizer , review ) padded = Encoding . pad ( tokenized , 200 ) truncated = Encoding . truncate ( padded , 200 ) Encoding . get_ids ( truncated ) end ) |&gt; Nx . tensor ( ) And we can reverse the operation to see our data. Note the [PAD] tokens. tensor |&gt; Nx . to_batched_list ( 1 ) |&gt; Enum . map ( fn tensor_review -&gt; { :ok , decoded } = tensor_review |&gt; Nx . to_flat_list ( ) |&gt; then ( &amp; Tokenizer . decode ( tokenizer , &amp;1 ) ) decoded end )","ref":"pretrained.html#get-a-tensor","title":"Pretrained Tokenizers - Get a tensor","type":"extras"}]